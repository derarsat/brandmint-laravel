import {
  init_runtime_dom_esm_bundler,
  runtime_dom_esm_bundler_exports
} from "./chunk-GNOUTLEU.js";
import {
  EMPTY_OBJ,
  NO,
  NOOP,
  PatchFlagNames,
  camelize,
  capitalize,
  extend,
  generateCodeFrame,
  hyphenate,
  init_shared_esm_bundler,
  isArray,
  isBuiltInDirective,
  isHTMLTag,
  isObject,
  isOn,
  isReservedProp,
  isSVGTag,
  isString,
  isSymbol,
  isVoidTag,
  makeMap,
  parseStringStyle,
  shared_esm_bundler_exports,
  slotFlagsText,
  toHandlerKey
} from "./chunk-UXHE6RDP.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-OL3AADLO.js";

// node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js
function defaultOnError(error) {
  throw error;
}
function defaultOnWarn(msg) {
  console.warn(`[Vue warn] ${msg.message}`);
}
function createCompilerError(code, loc, messages, additionalMessage) {
  const msg = true ? (messages || errorMessages)[code] + (additionalMessage || ``) : code;
  const error = new SyntaxError(String(msg));
  error.code = code;
  error.loc = loc;
  return error;
}
function registerRuntimeHelpers(helpers) {
  Object.getOwnPropertySymbols(helpers).forEach((s) => {
    helperNameMap[s] = helpers[s];
  });
}
function createRoot(children, loc = locStub) {
  return {
    type: 0,
    children,
    helpers: [],
    components: [],
    directives: [],
    hoists: [],
    imports: [],
    cached: 0,
    temps: 0,
    codegenNode: void 0,
    loc
  };
}
function createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent2 = false, loc = locStub) {
  if (context) {
    if (isBlock) {
      context.helper(OPEN_BLOCK);
      context.helper(getVNodeBlockHelper(context.inSSR, isComponent2));
    } else {
      context.helper(getVNodeHelper(context.inSSR, isComponent2));
    }
    if (directives) {
      context.helper(WITH_DIRECTIVES);
    }
  }
  return {
    type: 13,
    tag,
    props,
    children,
    patchFlag,
    dynamicProps,
    directives,
    isBlock,
    disableTracking,
    isComponent: isComponent2,
    loc
  };
}
function createArrayExpression(elements, loc = locStub) {
  return {
    type: 17,
    loc,
    elements
  };
}
function createObjectExpression(properties, loc = locStub) {
  return {
    type: 15,
    loc,
    properties
  };
}
function createObjectProperty(key, value) {
  return {
    type: 16,
    loc: locStub,
    key: isString(key) ? createSimpleExpression(key, true) : key,
    value
  };
}
function createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0) {
  return {
    type: 4,
    loc,
    content,
    isStatic,
    constType: isStatic ? 3 : constType
  };
}
function createInterpolation(content, loc) {
  return {
    type: 5,
    loc,
    content: isString(content) ? createSimpleExpression(content, false, loc) : content
  };
}
function createCompoundExpression(children, loc = locStub) {
  return {
    type: 8,
    loc,
    children
  };
}
function createCallExpression(callee, args = [], loc = locStub) {
  return {
    type: 14,
    loc,
    callee,
    arguments: args
  };
}
function createFunctionExpression(params, returns = void 0, newline = false, isSlot = false, loc = locStub) {
  return {
    type: 18,
    params,
    returns,
    newline,
    isSlot,
    loc
  };
}
function createConditionalExpression(test, consequent, alternate, newline = true) {
  return {
    type: 19,
    test,
    consequent,
    alternate,
    newline,
    loc: locStub
  };
}
function createCacheExpression(index, value, isVNode = false) {
  return {
    type: 20,
    index,
    value,
    isVNode,
    loc: locStub
  };
}
function createBlockStatement(body) {
  return {
    type: 21,
    body,
    loc: locStub
  };
}
function createTemplateLiteral(elements) {
  return {
    type: 22,
    elements,
    loc: locStub
  };
}
function createIfStatement(test, consequent, alternate) {
  return {
    type: 23,
    test,
    consequent,
    alternate,
    loc: locStub
  };
}
function createAssignmentExpression(left, right) {
  return {
    type: 24,
    left,
    right,
    loc: locStub
  };
}
function createSequenceExpression(expressions) {
  return {
    type: 25,
    expressions,
    loc: locStub
  };
}
function createReturnStatement(returns) {
  return {
    type: 26,
    returns,
    loc: locStub
  };
}
function isCoreComponent(tag) {
  if (isBuiltInType(tag, "Teleport")) {
    return TELEPORT;
  } else if (isBuiltInType(tag, "Suspense")) {
    return SUSPENSE;
  } else if (isBuiltInType(tag, "KeepAlive")) {
    return KEEP_ALIVE;
  } else if (isBuiltInType(tag, "BaseTransition")) {
    return BASE_TRANSITION;
  }
}
function getInnerRange(loc, offset, length) {
  const source = loc.source.slice(offset, offset + length);
  const newLoc = {
    source,
    start: advancePositionWithClone(loc.start, loc.source, offset),
    end: loc.end
  };
  if (length != null) {
    newLoc.end = advancePositionWithClone(loc.start, loc.source, offset + length);
  }
  return newLoc;
}
function advancePositionWithClone(pos, source, numberOfCharacters = source.length) {
  return advancePositionWithMutation(extend({}, pos), source, numberOfCharacters);
}
function advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {
  let linesCount = 0;
  let lastNewLinePos = -1;
  for (let i = 0; i < numberOfCharacters; i++) {
    if (source.charCodeAt(i) === 10) {
      linesCount++;
      lastNewLinePos = i;
    }
  }
  pos.offset += numberOfCharacters;
  pos.line += linesCount;
  pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
  return pos;
}
function assert(condition, msg) {
  if (!condition) {
    throw new Error(msg || `unexpected compiler condition`);
  }
}
function findDir(node, name, allowEmpty = false) {
  for (let i = 0; i < node.props.length; i++) {
    const p = node.props[i];
    if (p.type === 7 && (allowEmpty || p.exp) && (isString(name) ? p.name === name : name.test(p.name))) {
      return p;
    }
  }
}
function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
  for (let i = 0; i < node.props.length; i++) {
    const p = node.props[i];
    if (p.type === 6) {
      if (dynamicOnly)
        continue;
      if (p.name === name && (p.value || allowEmpty)) {
        return p;
      }
    } else if (p.name === "bind" && (p.exp || allowEmpty) && isStaticArgOf(p.arg, name)) {
      return p;
    }
  }
}
function isStaticArgOf(arg, name) {
  return !!(arg && isStaticExp(arg) && arg.content === name);
}
function hasDynamicKeyVBind(node) {
  return node.props.some(
    (p) => p.type === 7 && p.name === "bind" && (!p.arg || p.arg.type !== 4 || !p.arg.isStatic)
  );
}
function isText(node) {
  return node.type === 5 || node.type === 2;
}
function isVSlot(p) {
  return p.type === 7 && p.name === "slot";
}
function isTemplateNode(node) {
  return node.type === 1 && node.tagType === 3;
}
function isSlotOutlet(node) {
  return node.type === 1 && node.tagType === 2;
}
function getVNodeHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_VNODE : CREATE_ELEMENT_VNODE;
}
function getVNodeBlockHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;
}
function getUnnormalizedProps(props, callPath = []) {
  if (props && !isString(props) && props.type === 14) {
    const callee = props.callee;
    if (!isString(callee) && propsHelperSet.has(callee)) {
      return getUnnormalizedProps(props.arguments[0], callPath.concat(props));
    }
  }
  return [props, callPath];
}
function injectProp(node, prop, context) {
  let propsWithInjection;
  let props = node.type === 13 ? node.props : node.arguments[2];
  let callPath = [];
  let parentCall;
  if (props && !isString(props) && props.type === 14) {
    const ret = getUnnormalizedProps(props);
    props = ret[0];
    callPath = ret[1];
    parentCall = callPath[callPath.length - 1];
  }
  if (props == null || isString(props)) {
    propsWithInjection = createObjectExpression([prop]);
  } else if (props.type === 14) {
    const first = props.arguments[0];
    if (!isString(first) && first.type === 15) {
      first.properties.unshift(prop);
    } else {
      if (props.callee === TO_HANDLERS) {
        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
          createObjectExpression([prop]),
          props
        ]);
      } else {
        props.arguments.unshift(createObjectExpression([prop]));
      }
    }
    !propsWithInjection && (propsWithInjection = props);
  } else if (props.type === 15) {
    let alreadyExists = false;
    if (prop.key.type === 4) {
      const propKeyName = prop.key.content;
      alreadyExists = props.properties.some((p) => p.key.type === 4 && p.key.content === propKeyName);
    }
    if (!alreadyExists) {
      props.properties.unshift(prop);
    }
    propsWithInjection = props;
  } else {
    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
      createObjectExpression([prop]),
      props
    ]);
    if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {
      parentCall = callPath[callPath.length - 2];
    }
  }
  if (node.type === 13) {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node.props = propsWithInjection;
    }
  } else {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node.arguments[2] = propsWithInjection;
    }
  }
}
function toValidAssetId(name, type) {
  return `_${type}_${name.replace(/[^\w]/g, (searchValue, replaceValue) => {
    return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
  })}`;
}
function hasScopeRef(node, ids) {
  if (!node || Object.keys(ids).length === 0) {
    return false;
  }
  switch (node.type) {
    case 1:
      for (let i = 0; i < node.props.length; i++) {
        const p = node.props[i];
        if (p.type === 7 && (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {
          return true;
        }
      }
      return node.children.some((c) => hasScopeRef(c, ids));
    case 11:
      if (hasScopeRef(node.source, ids)) {
        return true;
      }
      return node.children.some((c) => hasScopeRef(c, ids));
    case 9:
      return node.branches.some((b) => hasScopeRef(b, ids));
    case 10:
      if (hasScopeRef(node.condition, ids)) {
        return true;
      }
      return node.children.some((c) => hasScopeRef(c, ids));
    case 4:
      return !node.isStatic && isSimpleIdentifier(node.content) && !!ids[node.content];
    case 8:
      return node.children.some((c) => isObject(c) && hasScopeRef(c, ids));
    case 5:
    case 12:
      return hasScopeRef(node.content, ids);
    case 2:
    case 3:
      return false;
    default:
      if (true)
        ;
      return false;
  }
}
function getMemoedVNodeCall(node) {
  if (node.type === 14 && node.callee === WITH_MEMO) {
    return node.arguments[1].returns;
  } else {
    return node;
  }
}
function makeBlock(node, { helper, removeHelper, inSSR }) {
  if (!node.isBlock) {
    node.isBlock = true;
    removeHelper(getVNodeHelper(inSSR, node.isComponent));
    helper(OPEN_BLOCK);
    helper(getVNodeBlockHelper(inSSR, node.isComponent));
  }
}
function getCompatValue(key, context) {
  const config = context.options ? context.options.compatConfig : context.compatConfig;
  const value = config && config[key];
  if (key === "MODE") {
    return value || 3;
  } else {
    return value;
  }
}
function isCompatEnabled(key, context) {
  const mode = getCompatValue("MODE", context);
  const value = getCompatValue(key, context);
  return mode === 3 ? value === true : value !== false;
}
function checkCompatEnabled(key, context, loc, ...args) {
  const enabled = isCompatEnabled(key, context);
  if (enabled) {
    warnDeprecation(key, context, loc, ...args);
  }
  return enabled;
}
function warnDeprecation(key, context, loc, ...args) {
  const val = getCompatValue(key, context);
  if (val === "suppress-warning") {
    return;
  }
  const { message, link } = deprecationData[key];
  const msg = `(deprecation ${key}) ${typeof message === "function" ? message(...args) : message}${link ? `
  Details: ${link}` : ``}`;
  const err = new SyntaxError(msg);
  err.code = key;
  if (loc)
    err.loc = loc;
  context.onWarn(err);
}
function baseParse(content, options = {}) {
  const context = createParserContext(content, options);
  const start = getCursor(context);
  return createRoot(parseChildren(context, 0, []), getSelection(context, start));
}
function createParserContext(content, rawOptions) {
  const options = extend({}, defaultParserOptions);
  let key;
  for (key in rawOptions) {
    options[key] = rawOptions[key] === void 0 ? defaultParserOptions[key] : rawOptions[key];
  }
  return {
    options,
    column: 1,
    line: 1,
    offset: 0,
    originalSource: content,
    source: content,
    inPre: false,
    inVPre: false,
    onWarn: options.onWarn
  };
}
function parseChildren(context, mode, ancestors) {
  const parent = last(ancestors);
  const ns = parent ? parent.ns : 0;
  const nodes = [];
  while (!isEnd(context, mode, ancestors)) {
    const s = context.source;
    let node = void 0;
    if (mode === 0 || mode === 1) {
      if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {
        node = parseInterpolation(context, mode);
      } else if (mode === 0 && s[0] === "<") {
        if (s.length === 1) {
          emitError(context, 5, 1);
        } else if (s[1] === "!") {
          if (startsWith(s, "<!--")) {
            node = parseComment(context);
          } else if (startsWith(s, "<!DOCTYPE")) {
            node = parseBogusComment(context);
          } else if (startsWith(s, "<![CDATA[")) {
            if (ns !== 0) {
              node = parseCDATA(context, ancestors);
            } else {
              emitError(context, 1);
              node = parseBogusComment(context);
            }
          } else {
            emitError(context, 11);
            node = parseBogusComment(context);
          }
        } else if (s[1] === "/") {
          if (s.length === 2) {
            emitError(context, 5, 2);
          } else if (s[2] === ">") {
            emitError(context, 14, 2);
            advanceBy(context, 3);
            continue;
          } else if (/[a-z]/i.test(s[2])) {
            emitError(context, 23);
            parseTag(context, 1, parent);
            continue;
          } else {
            emitError(context, 12, 2);
            node = parseBogusComment(context);
          }
        } else if (/[a-z]/i.test(s[1])) {
          node = parseElement(context, ancestors);
          if (isCompatEnabled("COMPILER_NATIVE_TEMPLATE", context) && node && node.tag === "template" && !node.props.some((p) => p.type === 7 && isSpecialTemplateDirective(p.name))) {
            warnDeprecation("COMPILER_NATIVE_TEMPLATE", context, node.loc);
            node = node.children;
          }
        } else if (s[1] === "?") {
          emitError(context, 21, 1);
          node = parseBogusComment(context);
        } else {
          emitError(context, 12, 1);
        }
      }
    }
    if (!node) {
      node = parseText(context, mode);
    }
    if (isArray(node)) {
      for (let i = 0; i < node.length; i++) {
        pushNode(nodes, node[i]);
      }
    } else {
      pushNode(nodes, node);
    }
  }
  let removedWhitespace = false;
  if (mode !== 2 && mode !== 1) {
    const shouldCondense = context.options.whitespace !== "preserve";
    for (let i = 0; i < nodes.length; i++) {
      const node = nodes[i];
      if (!context.inPre && node.type === 2) {
        if (!/[^\t\r\n\f ]/.test(node.content)) {
          const prev = nodes[i - 1];
          const next = nodes[i + 1];
          if (!prev || !next || shouldCondense && (prev.type === 3 || next.type === 3 || prev.type === 1 && next.type === 1 && /[\r\n]/.test(node.content))) {
            removedWhitespace = true;
            nodes[i] = null;
          } else {
            node.content = " ";
          }
        } else if (shouldCondense) {
          node.content = node.content.replace(/[\t\r\n\f ]+/g, " ");
        }
      } else if (node.type === 3 && !context.options.comments) {
        removedWhitespace = true;
        nodes[i] = null;
      }
    }
    if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
      const first = nodes[0];
      if (first && first.type === 2) {
        first.content = first.content.replace(/^\r?\n/, "");
      }
    }
  }
  return removedWhitespace ? nodes.filter(Boolean) : nodes;
}
function pushNode(nodes, node) {
  if (node.type === 2) {
    const prev = last(nodes);
    if (prev && prev.type === 2 && prev.loc.end.offset === node.loc.start.offset) {
      prev.content += node.content;
      prev.loc.end = node.loc.end;
      prev.loc.source += node.loc.source;
      return;
    }
  }
  nodes.push(node);
}
function parseCDATA(context, ancestors) {
  advanceBy(context, 9);
  const nodes = parseChildren(context, 3, ancestors);
  if (context.source.length === 0) {
    emitError(context, 6);
  } else {
    advanceBy(context, 3);
  }
  return nodes;
}
function parseComment(context) {
  const start = getCursor(context);
  let content;
  const match = /--(\!)?>/.exec(context.source);
  if (!match) {
    content = context.source.slice(4);
    advanceBy(context, context.source.length);
    emitError(context, 7);
  } else {
    if (match.index <= 3) {
      emitError(context, 0);
    }
    if (match[1]) {
      emitError(context, 10);
    }
    content = context.source.slice(4, match.index);
    const s = context.source.slice(0, match.index);
    let prevIndex = 1, nestedIndex = 0;
    while ((nestedIndex = s.indexOf("<!--", prevIndex)) !== -1) {
      advanceBy(context, nestedIndex - prevIndex + 1);
      if (nestedIndex + 4 < s.length) {
        emitError(context, 16);
      }
      prevIndex = nestedIndex + 1;
    }
    advanceBy(context, match.index + match[0].length - prevIndex + 1);
  }
  return {
    type: 3,
    content,
    loc: getSelection(context, start)
  };
}
function parseBogusComment(context) {
  const start = getCursor(context);
  const contentStart = context.source[1] === "?" ? 1 : 2;
  let content;
  const closeIndex = context.source.indexOf(">");
  if (closeIndex === -1) {
    content = context.source.slice(contentStart);
    advanceBy(context, context.source.length);
  } else {
    content = context.source.slice(contentStart, closeIndex);
    advanceBy(context, closeIndex + 1);
  }
  return {
    type: 3,
    content,
    loc: getSelection(context, start)
  };
}
function parseElement(context, ancestors) {
  const wasInPre = context.inPre;
  const wasInVPre = context.inVPre;
  const parent = last(ancestors);
  const element = parseTag(context, 0, parent);
  const isPreBoundary = context.inPre && !wasInPre;
  const isVPreBoundary = context.inVPre && !wasInVPre;
  if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {
    if (isPreBoundary) {
      context.inPre = false;
    }
    if (isVPreBoundary) {
      context.inVPre = false;
    }
    return element;
  }
  ancestors.push(element);
  const mode = context.options.getTextMode(element, parent);
  const children = parseChildren(context, mode, ancestors);
  ancestors.pop();
  {
    const inlineTemplateProp = element.props.find((p) => p.type === 6 && p.name === "inline-template");
    if (inlineTemplateProp && checkCompatEnabled("COMPILER_INLINE_TEMPLATE", context, inlineTemplateProp.loc)) {
      const loc = getSelection(context, element.loc.end);
      inlineTemplateProp.value = {
        type: 2,
        content: loc.source,
        loc
      };
    }
  }
  element.children = children;
  if (startsWithEndTagOpen(context.source, element.tag)) {
    parseTag(context, 1, parent);
  } else {
    emitError(context, 24, 0, element.loc.start);
    if (context.source.length === 0 && element.tag.toLowerCase() === "script") {
      const first = children[0];
      if (first && startsWith(first.loc.source, "<!--")) {
        emitError(context, 8);
      }
    }
  }
  element.loc = getSelection(context, element.loc.start);
  if (isPreBoundary) {
    context.inPre = false;
  }
  if (isVPreBoundary) {
    context.inVPre = false;
  }
  return element;
}
function parseTag(context, type, parent) {
  const start = getCursor(context);
  const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
  const tag = match[1];
  const ns = context.options.getNamespace(tag, parent);
  advanceBy(context, match[0].length);
  advanceSpaces(context);
  const cursor = getCursor(context);
  const currentSource = context.source;
  if (context.options.isPreTag(tag)) {
    context.inPre = true;
  }
  let props = parseAttributes(context, type);
  if (type === 0 && !context.inVPre && props.some((p) => p.type === 7 && p.name === "pre")) {
    context.inVPre = true;
    extend(context, cursor);
    context.source = currentSource;
    props = parseAttributes(context, type).filter((p) => p.name !== "v-pre");
  }
  let isSelfClosing = false;
  if (context.source.length === 0) {
    emitError(context, 9);
  } else {
    isSelfClosing = startsWith(context.source, "/>");
    if (type === 1 && isSelfClosing) {
      emitError(context, 4);
    }
    advanceBy(context, isSelfClosing ? 2 : 1);
  }
  if (type === 1) {
    return;
  }
  if (isCompatEnabled("COMPILER_V_IF_V_FOR_PRECEDENCE", context)) {
    let hasIf = false;
    let hasFor = false;
    for (let i = 0; i < props.length; i++) {
      const p = props[i];
      if (p.type === 7) {
        if (p.name === "if") {
          hasIf = true;
        } else if (p.name === "for") {
          hasFor = true;
        }
      }
      if (hasIf && hasFor) {
        warnDeprecation("COMPILER_V_IF_V_FOR_PRECEDENCE", context, getSelection(context, start));
        break;
      }
    }
  }
  let tagType = 0;
  if (!context.inVPre) {
    if (tag === "slot") {
      tagType = 2;
    } else if (tag === "template") {
      if (props.some((p) => p.type === 7 && isSpecialTemplateDirective(p.name))) {
        tagType = 3;
      }
    } else if (isComponent(tag, props, context)) {
      tagType = 1;
    }
  }
  return {
    type: 1,
    ns,
    tag,
    tagType,
    props,
    isSelfClosing,
    children: [],
    loc: getSelection(context, start),
    codegenNode: void 0
  };
}
function isComponent(tag, props, context) {
  const options = context.options;
  if (options.isCustomElement(tag)) {
    return false;
  }
  if (tag === "component" || /^[A-Z]/.test(tag) || isCoreComponent(tag) || options.isBuiltInComponent && options.isBuiltInComponent(tag) || options.isNativeTag && !options.isNativeTag(tag)) {
    return true;
  }
  for (let i = 0; i < props.length; i++) {
    const p = props[i];
    if (p.type === 6) {
      if (p.name === "is" && p.value) {
        if (p.value.content.startsWith("vue:")) {
          return true;
        } else if (checkCompatEnabled("COMPILER_IS_ON_ELEMENT", context, p.loc)) {
          return true;
        }
      }
    } else {
      if (p.name === "is") {
        return true;
      } else if (p.name === "bind" && isStaticArgOf(p.arg, "is") && true && checkCompatEnabled("COMPILER_IS_ON_ELEMENT", context, p.loc)) {
        return true;
      }
    }
  }
}
function parseAttributes(context, type) {
  const props = [];
  const attributeNames = /* @__PURE__ */ new Set();
  while (context.source.length > 0 && !startsWith(context.source, ">") && !startsWith(context.source, "/>")) {
    if (startsWith(context.source, "/")) {
      emitError(context, 22);
      advanceBy(context, 1);
      advanceSpaces(context);
      continue;
    }
    if (type === 1) {
      emitError(context, 3);
    }
    const attr = parseAttribute(context, attributeNames);
    if (attr.type === 6 && attr.value && attr.name === "class") {
      attr.value.content = attr.value.content.replace(/\s+/g, " ").trim();
    }
    if (type === 0) {
      props.push(attr);
    }
    if (/^[^\t\r\n\f />]/.test(context.source)) {
      emitError(context, 15);
    }
    advanceSpaces(context);
  }
  return props;
}
function parseAttribute(context, nameSet) {
  const start = getCursor(context);
  const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
  const name = match[0];
  if (nameSet.has(name)) {
    emitError(context, 2);
  }
  nameSet.add(name);
  if (name[0] === "=") {
    emitError(context, 19);
  }
  {
    const pattern = /["'<]/g;
    let m;
    while (m = pattern.exec(name)) {
      emitError(context, 17, m.index);
    }
  }
  advanceBy(context, name.length);
  let value = void 0;
  if (/^[\t\r\n\f ]*=/.test(context.source)) {
    advanceSpaces(context);
    advanceBy(context, 1);
    advanceSpaces(context);
    value = parseAttributeValue(context);
    if (!value) {
      emitError(context, 13);
    }
  }
  const loc = getSelection(context, start);
  if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(name)) {
    const match2 = /(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(name);
    let isPropShorthand = startsWith(name, ".");
    let dirName = match2[1] || (isPropShorthand || startsWith(name, ":") ? "bind" : startsWith(name, "@") ? "on" : "slot");
    let arg;
    if (match2[2]) {
      const isSlot = dirName === "slot";
      const startOffset = name.lastIndexOf(match2[2]);
      const loc2 = getSelection(context, getNewPosition(context, start, startOffset), getNewPosition(context, start, startOffset + match2[2].length + (isSlot && match2[3] || "").length));
      let content = match2[2];
      let isStatic = true;
      if (content.startsWith("[")) {
        isStatic = false;
        if (!content.endsWith("]")) {
          emitError(context, 27);
          content = content.slice(1);
        } else {
          content = content.slice(1, content.length - 1);
        }
      } else if (isSlot) {
        content += match2[3] || "";
      }
      arg = {
        type: 4,
        content,
        isStatic,
        constType: isStatic ? 3 : 0,
        loc: loc2
      };
    }
    if (value && value.isQuoted) {
      const valueLoc = value.loc;
      valueLoc.start.offset++;
      valueLoc.start.column++;
      valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);
      valueLoc.source = valueLoc.source.slice(1, -1);
    }
    const modifiers = match2[3] ? match2[3].slice(1).split(".") : [];
    if (isPropShorthand)
      modifiers.push("prop");
    if (dirName === "bind" && arg) {
      if (modifiers.includes("sync") && checkCompatEnabled("COMPILER_V_BIND_SYNC", context, loc, arg.loc.source)) {
        dirName = "model";
        modifiers.splice(modifiers.indexOf("sync"), 1);
      }
      if (modifiers.includes("prop")) {
        checkCompatEnabled("COMPILER_V_BIND_PROP", context, loc);
      }
    }
    return {
      type: 7,
      name: dirName,
      exp: value && {
        type: 4,
        content: value.content,
        isStatic: false,
        constType: 0,
        loc: value.loc
      },
      arg,
      modifiers,
      loc
    };
  }
  if (!context.inVPre && startsWith(name, "v-")) {
    emitError(context, 26);
  }
  return {
    type: 6,
    name,
    value: value && {
      type: 2,
      content: value.content,
      loc: value.loc
    },
    loc
  };
}
function parseAttributeValue(context) {
  const start = getCursor(context);
  let content;
  const quote = context.source[0];
  const isQuoted = quote === `"` || quote === `'`;
  if (isQuoted) {
    advanceBy(context, 1);
    const endIndex = context.source.indexOf(quote);
    if (endIndex === -1) {
      content = parseTextData(context, context.source.length, 4);
    } else {
      content = parseTextData(context, endIndex, 4);
      advanceBy(context, 1);
    }
  } else {
    const match = /^[^\t\r\n\f >]+/.exec(context.source);
    if (!match) {
      return void 0;
    }
    const unexpectedChars = /["'<=`]/g;
    let m;
    while (m = unexpectedChars.exec(match[0])) {
      emitError(context, 18, m.index);
    }
    content = parseTextData(context, match[0].length, 4);
  }
  return { content, isQuoted, loc: getSelection(context, start) };
}
function parseInterpolation(context, mode) {
  const [open, close] = context.options.delimiters;
  const closeIndex = context.source.indexOf(close, open.length);
  if (closeIndex === -1) {
    emitError(context, 25);
    return void 0;
  }
  const start = getCursor(context);
  advanceBy(context, open.length);
  const innerStart = getCursor(context);
  const innerEnd = getCursor(context);
  const rawContentLength = closeIndex - open.length;
  const rawContent = context.source.slice(0, rawContentLength);
  const preTrimContent = parseTextData(context, rawContentLength, mode);
  const content = preTrimContent.trim();
  const startOffset = preTrimContent.indexOf(content);
  if (startOffset > 0) {
    advancePositionWithMutation(innerStart, rawContent, startOffset);
  }
  const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
  advancePositionWithMutation(innerEnd, rawContent, endOffset);
  advanceBy(context, close.length);
  return {
    type: 5,
    content: {
      type: 4,
      isStatic: false,
      constType: 0,
      content,
      loc: getSelection(context, innerStart, innerEnd)
    },
    loc: getSelection(context, start)
  };
}
function parseText(context, mode) {
  const endTokens = mode === 3 ? ["]]>"] : ["<", context.options.delimiters[0]];
  let endIndex = context.source.length;
  for (let i = 0; i < endTokens.length; i++) {
    const index = context.source.indexOf(endTokens[i], 1);
    if (index !== -1 && endIndex > index) {
      endIndex = index;
    }
  }
  const start = getCursor(context);
  const content = parseTextData(context, endIndex, mode);
  return {
    type: 2,
    content,
    loc: getSelection(context, start)
  };
}
function parseTextData(context, length, mode) {
  const rawText = context.source.slice(0, length);
  advanceBy(context, length);
  if (mode === 2 || mode === 3 || !rawText.includes("&")) {
    return rawText;
  } else {
    return context.options.decodeEntities(rawText, mode === 4);
  }
}
function getCursor(context) {
  const { column, line, offset } = context;
  return { column, line, offset };
}
function getSelection(context, start, end) {
  end = end || getCursor(context);
  return {
    start,
    end,
    source: context.originalSource.slice(start.offset, end.offset)
  };
}
function last(xs) {
  return xs[xs.length - 1];
}
function startsWith(source, searchString) {
  return source.startsWith(searchString);
}
function advanceBy(context, numberOfCharacters) {
  const { source } = context;
  advancePositionWithMutation(context, source, numberOfCharacters);
  context.source = source.slice(numberOfCharacters);
}
function advanceSpaces(context) {
  const match = /^[\t\r\n\f ]+/.exec(context.source);
  if (match) {
    advanceBy(context, match[0].length);
  }
}
function getNewPosition(context, start, numberOfCharacters) {
  return advancePositionWithClone(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);
}
function emitError(context, code, offset, loc = getCursor(context)) {
  if (offset) {
    loc.offset += offset;
    loc.column += offset;
  }
  context.options.onError(createCompilerError(code, {
    start: loc,
    end: loc,
    source: ""
  }));
}
function isEnd(context, mode, ancestors) {
  const s = context.source;
  switch (mode) {
    case 0:
      if (startsWith(s, "</")) {
        for (let i = ancestors.length - 1; i >= 0; --i) {
          if (startsWithEndTagOpen(s, ancestors[i].tag)) {
            return true;
          }
        }
      }
      break;
    case 1:
    case 2: {
      const parent = last(ancestors);
      if (parent && startsWithEndTagOpen(s, parent.tag)) {
        return true;
      }
      break;
    }
    case 3:
      if (startsWith(s, "]]>")) {
        return true;
      }
      break;
  }
  return !s;
}
function startsWithEndTagOpen(source, tag) {
  return startsWith(source, "</") && source.slice(2, 2 + tag.length).toLowerCase() === tag.toLowerCase() && /[\t\r\n\f />]/.test(source[2 + tag.length] || ">");
}
function hoistStatic(root, context) {
  walk(
    root,
    context,
    isSingleElementRoot(root, root.children[0])
  );
}
function isSingleElementRoot(root, child) {
  const { children } = root;
  return children.length === 1 && child.type === 1 && !isSlotOutlet(child);
}
function walk(node, context, doNotHoistNode = false) {
  const { children } = node;
  const originalCount = children.length;
  let hoistedCount = 0;
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    if (child.type === 1 && child.tagType === 0) {
      const constantType = doNotHoistNode ? 0 : getConstantType(child, context);
      if (constantType > 0) {
        if (constantType >= 2) {
          child.codegenNode.patchFlag = -1 + (true ? ` /* HOISTED */` : ``);
          child.codegenNode = context.hoist(child.codegenNode);
          hoistedCount++;
          continue;
        }
      } else {
        const codegenNode = child.codegenNode;
        if (codegenNode.type === 13) {
          const flag = getPatchFlag(codegenNode);
          if ((!flag || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {
            const props = getNodeProps(child);
            if (props) {
              codegenNode.props = context.hoist(props);
            }
          }
          if (codegenNode.dynamicProps) {
            codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
          }
        }
      }
    } else if (child.type === 12 && getConstantType(child.content, context) >= 2) {
      child.codegenNode = context.hoist(child.codegenNode);
      hoistedCount++;
    }
    if (child.type === 1) {
      const isComponent2 = child.tagType === 1;
      if (isComponent2) {
        context.scopes.vSlot++;
      }
      walk(child, context);
      if (isComponent2) {
        context.scopes.vSlot--;
      }
    } else if (child.type === 11) {
      walk(child, context, child.children.length === 1);
    } else if (child.type === 9) {
      for (let i2 = 0; i2 < child.branches.length; i2++) {
        walk(child.branches[i2], context, child.branches[i2].children.length === 1);
      }
    }
  }
  if (hoistedCount && context.transformHoist) {
    context.transformHoist(children, context, node);
  }
  if (hoistedCount && hoistedCount === originalCount && node.type === 1 && node.tagType === 0 && node.codegenNode && node.codegenNode.type === 13 && isArray(node.codegenNode.children)) {
    node.codegenNode.children = context.hoist(createArrayExpression(node.codegenNode.children));
  }
}
function getConstantType(node, context) {
  const { constantCache } = context;
  switch (node.type) {
    case 1:
      if (node.tagType !== 0) {
        return 0;
      }
      const cached = constantCache.get(node);
      if (cached !== void 0) {
        return cached;
      }
      const codegenNode = node.codegenNode;
      if (codegenNode.type !== 13) {
        return 0;
      }
      if (codegenNode.isBlock && node.tag !== "svg" && node.tag !== "foreignObject") {
        return 0;
      }
      const flag = getPatchFlag(codegenNode);
      if (!flag) {
        let returnType2 = 3;
        const generatedPropsType = getGeneratedPropsConstantType(node, context);
        if (generatedPropsType === 0) {
          constantCache.set(node, 0);
          return 0;
        }
        if (generatedPropsType < returnType2) {
          returnType2 = generatedPropsType;
        }
        for (let i = 0; i < node.children.length; i++) {
          const childType = getConstantType(node.children[i], context);
          if (childType === 0) {
            constantCache.set(node, 0);
            return 0;
          }
          if (childType < returnType2) {
            returnType2 = childType;
          }
        }
        if (returnType2 > 1) {
          for (let i = 0; i < node.props.length; i++) {
            const p = node.props[i];
            if (p.type === 7 && p.name === "bind" && p.exp) {
              const expType = getConstantType(p.exp, context);
              if (expType === 0) {
                constantCache.set(node, 0);
                return 0;
              }
              if (expType < returnType2) {
                returnType2 = expType;
              }
            }
          }
        }
        if (codegenNode.isBlock) {
          for (let i = 0; i < node.props.length; i++) {
            const p = node.props[i];
            if (p.type === 7) {
              constantCache.set(node, 0);
              return 0;
            }
          }
          context.removeHelper(OPEN_BLOCK);
          context.removeHelper(getVNodeBlockHelper(context.inSSR, codegenNode.isComponent));
          codegenNode.isBlock = false;
          context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));
        }
        constantCache.set(node, returnType2);
        return returnType2;
      } else {
        constantCache.set(node, 0);
        return 0;
      }
    case 2:
    case 3:
      return 3;
    case 9:
    case 11:
    case 10:
      return 0;
    case 5:
    case 12:
      return getConstantType(node.content, context);
    case 4:
      return node.constType;
    case 8:
      let returnType = 3;
      for (let i = 0; i < node.children.length; i++) {
        const child = node.children[i];
        if (isString(child) || isSymbol(child)) {
          continue;
        }
        const childType = getConstantType(child, context);
        if (childType === 0) {
          return 0;
        } else if (childType < returnType) {
          returnType = childType;
        }
      }
      return returnType;
    default:
      if (true)
        ;
      return 0;
  }
}
function getConstantTypeOfHelperCall(value, context) {
  if (value.type === 14 && !isString(value.callee) && allowHoistedHelperSet.has(value.callee)) {
    const arg = value.arguments[0];
    if (arg.type === 4) {
      return getConstantType(arg, context);
    } else if (arg.type === 14) {
      return getConstantTypeOfHelperCall(arg, context);
    }
  }
  return 0;
}
function getGeneratedPropsConstantType(node, context) {
  let returnType = 3;
  const props = getNodeProps(node);
  if (props && props.type === 15) {
    const { properties } = props;
    for (let i = 0; i < properties.length; i++) {
      const { key, value } = properties[i];
      const keyType = getConstantType(key, context);
      if (keyType === 0) {
        return keyType;
      }
      if (keyType < returnType) {
        returnType = keyType;
      }
      let valueType;
      if (value.type === 4) {
        valueType = getConstantType(value, context);
      } else if (value.type === 14) {
        valueType = getConstantTypeOfHelperCall(value, context);
      } else {
        valueType = 0;
      }
      if (valueType === 0) {
        return valueType;
      }
      if (valueType < returnType) {
        returnType = valueType;
      }
    }
  }
  return returnType;
}
function getNodeProps(node) {
  const codegenNode = node.codegenNode;
  if (codegenNode.type === 13) {
    return codegenNode.props;
  }
}
function getPatchFlag(node) {
  const flag = node.patchFlag;
  return flag ? parseInt(flag, 10) : void 0;
}
function createTransformContext(root, { filename = "", prefixIdentifiers = false, hoistStatic: hoistStatic2 = false, cacheHandlers = false, nodeTransforms = [], directiveTransforms = {}, transformHoist = null, isBuiltInComponent = NOOP, isCustomElement = NOOP, expressionPlugins = [], scopeId = null, slotted = true, ssr = false, inSSR = false, ssrCssVars = ``, bindingMetadata = EMPTY_OBJ, inline = false, isTS = false, onError = defaultOnError, onWarn = defaultOnWarn, compatConfig }) {
  const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
  const context = {
    selfName: nameMatch && capitalize(camelize(nameMatch[1])),
    prefixIdentifiers,
    hoistStatic: hoistStatic2,
    cacheHandlers,
    nodeTransforms,
    directiveTransforms,
    transformHoist,
    isBuiltInComponent,
    isCustomElement,
    expressionPlugins,
    scopeId,
    slotted,
    ssr,
    inSSR,
    ssrCssVars,
    bindingMetadata,
    inline,
    isTS,
    onError,
    onWarn,
    compatConfig,
    root,
    helpers: /* @__PURE__ */ new Map(),
    components: /* @__PURE__ */ new Set(),
    directives: /* @__PURE__ */ new Set(),
    hoists: [],
    imports: [],
    constantCache: /* @__PURE__ */ new Map(),
    temps: 0,
    cached: 0,
    identifiers: /* @__PURE__ */ Object.create(null),
    scopes: {
      vFor: 0,
      vSlot: 0,
      vPre: 0,
      vOnce: 0
    },
    parent: null,
    currentNode: root,
    childIndex: 0,
    inVOnce: false,
    helper(name) {
      const count = context.helpers.get(name) || 0;
      context.helpers.set(name, count + 1);
      return name;
    },
    removeHelper(name) {
      const count = context.helpers.get(name);
      if (count) {
        const currentCount = count - 1;
        if (!currentCount) {
          context.helpers.delete(name);
        } else {
          context.helpers.set(name, currentCount);
        }
      }
    },
    helperString(name) {
      return `_${helperNameMap[context.helper(name)]}`;
    },
    replaceNode(node) {
      if (true) {
        if (!context.currentNode) {
          throw new Error(`Node being replaced is already removed.`);
        }
        if (!context.parent) {
          throw new Error(`Cannot replace root node.`);
        }
      }
      context.parent.children[context.childIndex] = context.currentNode = node;
    },
    removeNode(node) {
      if (!context.parent) {
        throw new Error(`Cannot remove root node.`);
      }
      const list = context.parent.children;
      const removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;
      if (removalIndex < 0) {
        throw new Error(`node being removed is not a child of current parent`);
      }
      if (!node || node === context.currentNode) {
        context.currentNode = null;
        context.onNodeRemoved();
      } else {
        if (context.childIndex > removalIndex) {
          context.childIndex--;
          context.onNodeRemoved();
        }
      }
      context.parent.children.splice(removalIndex, 1);
    },
    onNodeRemoved: () => {
    },
    addIdentifiers(exp) {
    },
    removeIdentifiers(exp) {
    },
    hoist(exp) {
      if (isString(exp))
        exp = createSimpleExpression(exp);
      context.hoists.push(exp);
      const identifier = createSimpleExpression(`_hoisted_${context.hoists.length}`, false, exp.loc, 2);
      identifier.hoisted = exp;
      return identifier;
    },
    cache(exp, isVNode = false) {
      return createCacheExpression(context.cached++, exp, isVNode);
    }
  };
  {
    context.filters = /* @__PURE__ */ new Set();
  }
  return context;
}
function transform(root, options) {
  const context = createTransformContext(root, options);
  traverseNode(root, context);
  if (options.hoistStatic) {
    hoistStatic(root, context);
  }
  if (!options.ssr) {
    createRootCodegen(root, context);
  }
  root.helpers = [...context.helpers.keys()];
  root.components = [...context.components];
  root.directives = [...context.directives];
  root.imports = context.imports;
  root.hoists = context.hoists;
  root.temps = context.temps;
  root.cached = context.cached;
  {
    root.filters = [...context.filters];
  }
}
function createRootCodegen(root, context) {
  const { helper } = context;
  const { children } = root;
  if (children.length === 1) {
    const child = children[0];
    if (isSingleElementRoot(root, child) && child.codegenNode) {
      const codegenNode = child.codegenNode;
      if (codegenNode.type === 13) {
        makeBlock(codegenNode, context);
      }
      root.codegenNode = codegenNode;
    } else {
      root.codegenNode = child;
    }
  } else if (children.length > 1) {
    let patchFlag = 64;
    let patchFlagText = PatchFlagNames[64];
    if (children.filter((c) => c.type !== 3).length === 1) {
      patchFlag |= 2048;
      patchFlagText += `, ${PatchFlagNames[2048]}`;
    }
    root.codegenNode = createVNodeCall(context, helper(FRAGMENT), void 0, root.children, patchFlag + (true ? ` /* ${patchFlagText} */` : ``), void 0, void 0, true, void 0, false);
  } else
    ;
}
function traverseChildren(parent, context) {
  let i = 0;
  const nodeRemoved = () => {
    i--;
  };
  for (; i < parent.children.length; i++) {
    const child = parent.children[i];
    if (isString(child))
      continue;
    context.parent = parent;
    context.childIndex = i;
    context.onNodeRemoved = nodeRemoved;
    traverseNode(child, context);
  }
}
function traverseNode(node, context) {
  context.currentNode = node;
  const { nodeTransforms } = context;
  const exitFns = [];
  for (let i2 = 0; i2 < nodeTransforms.length; i2++) {
    const onExit = nodeTransforms[i2](node, context);
    if (onExit) {
      if (isArray(onExit)) {
        exitFns.push(...onExit);
      } else {
        exitFns.push(onExit);
      }
    }
    if (!context.currentNode) {
      return;
    } else {
      node = context.currentNode;
    }
  }
  switch (node.type) {
    case 3:
      if (!context.ssr) {
        context.helper(CREATE_COMMENT);
      }
      break;
    case 5:
      if (!context.ssr) {
        context.helper(TO_DISPLAY_STRING);
      }
      break;
    case 9:
      for (let i2 = 0; i2 < node.branches.length; i2++) {
        traverseNode(node.branches[i2], context);
      }
      break;
    case 10:
    case 11:
    case 1:
    case 0:
      traverseChildren(node, context);
      break;
  }
  context.currentNode = node;
  let i = exitFns.length;
  while (i--) {
    exitFns[i]();
  }
}
function createStructuralDirectiveTransform(name, fn) {
  const matches = isString(name) ? (n) => n === name : (n) => name.test(n);
  return (node, context) => {
    if (node.type === 1) {
      const { props } = node;
      if (node.tagType === 3 && props.some(isVSlot)) {
        return;
      }
      const exitFns = [];
      for (let i = 0; i < props.length; i++) {
        const prop = props[i];
        if (prop.type === 7 && matches(prop.name)) {
          props.splice(i, 1);
          i--;
          const onExit = fn(node, prop, context);
          if (onExit)
            exitFns.push(onExit);
        }
      }
      return exitFns;
    }
  };
}
function createCodegenContext(ast, { mode = "function", prefixIdentifiers = mode === "module", sourceMap = false, filename = `template.vue.html`, scopeId = null, optimizeImports = false, runtimeGlobalName = `Vue`, runtimeModuleName = `vue`, ssrRuntimeModuleName = "vue/server-renderer", ssr = false, isTS = false, inSSR = false }) {
  const context = {
    mode,
    prefixIdentifiers,
    sourceMap,
    filename,
    scopeId,
    optimizeImports,
    runtimeGlobalName,
    runtimeModuleName,
    ssrRuntimeModuleName,
    ssr,
    isTS,
    inSSR,
    source: ast.loc.source,
    code: ``,
    column: 1,
    line: 1,
    offset: 0,
    indentLevel: 0,
    pure: false,
    map: void 0,
    helper(key) {
      return `_${helperNameMap[key]}`;
    },
    push(code, node) {
      context.code += code;
    },
    indent() {
      newline(++context.indentLevel);
    },
    deindent(withoutNewLine = false) {
      if (withoutNewLine) {
        --context.indentLevel;
      } else {
        newline(--context.indentLevel);
      }
    },
    newline() {
      newline(context.indentLevel);
    }
  };
  function newline(n) {
    context.push("\n" + `  `.repeat(n));
  }
  return context;
}
function generate(ast, options = {}) {
  const context = createCodegenContext(ast, options);
  if (options.onContextCreated)
    options.onContextCreated(context);
  const { mode, push, prefixIdentifiers, indent, deindent, newline, scopeId, ssr } = context;
  const hasHelpers = ast.helpers.length > 0;
  const useWithBlock = !prefixIdentifiers && mode !== "module";
  const preambleContext = context;
  {
    genFunctionPreamble(ast, preambleContext);
  }
  const functionName = ssr ? `ssrRender` : `render`;
  const args = ssr ? ["_ctx", "_push", "_parent", "_attrs"] : ["_ctx", "_cache"];
  const signature = args.join(", ");
  {
    push(`function ${functionName}(${signature}) {`);
  }
  indent();
  if (useWithBlock) {
    push(`with (_ctx) {`);
    indent();
    if (hasHelpers) {
      push(`const { ${ast.helpers.map(aliasHelper).join(", ")} } = _Vue`);
      push(`
`);
      newline();
    }
  }
  if (ast.components.length) {
    genAssets(ast.components, "component", context);
    if (ast.directives.length || ast.temps > 0) {
      newline();
    }
  }
  if (ast.directives.length) {
    genAssets(ast.directives, "directive", context);
    if (ast.temps > 0) {
      newline();
    }
  }
  if (ast.filters && ast.filters.length) {
    newline();
    genAssets(ast.filters, "filter", context);
    newline();
  }
  if (ast.temps > 0) {
    push(`let `);
    for (let i = 0; i < ast.temps; i++) {
      push(`${i > 0 ? `, ` : ``}_temp${i}`);
    }
  }
  if (ast.components.length || ast.directives.length || ast.temps) {
    push(`
`);
    newline();
  }
  if (!ssr) {
    push(`return `);
  }
  if (ast.codegenNode) {
    genNode(ast.codegenNode, context);
  } else {
    push(`null`);
  }
  if (useWithBlock) {
    deindent();
    push(`}`);
  }
  deindent();
  push(`}`);
  return {
    ast,
    code: context.code,
    preamble: ``,
    map: context.map ? context.map.toJSON() : void 0
  };
}
function genFunctionPreamble(ast, context) {
  const { ssr, prefixIdentifiers, push, newline, runtimeModuleName, runtimeGlobalName, ssrRuntimeModuleName } = context;
  const VueBinding = runtimeGlobalName;
  if (ast.helpers.length > 0) {
    {
      push(`const _Vue = ${VueBinding}
`);
      if (ast.hoists.length) {
        const staticHelpers = [
          CREATE_VNODE,
          CREATE_ELEMENT_VNODE,
          CREATE_COMMENT,
          CREATE_TEXT,
          CREATE_STATIC
        ].filter((helper) => ast.helpers.includes(helper)).map(aliasHelper).join(", ");
        push(`const { ${staticHelpers} } = _Vue
`);
      }
    }
  }
  genHoists(ast.hoists, context);
  newline();
  push(`return `);
}
function genAssets(assets, type, { helper, push, newline, isTS }) {
  const resolver = helper(type === "filter" ? RESOLVE_FILTER : type === "component" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE);
  for (let i = 0; i < assets.length; i++) {
    let id = assets[i];
    const maybeSelfReference = id.endsWith("__self");
    if (maybeSelfReference) {
      id = id.slice(0, -6);
    }
    push(`const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`);
    if (i < assets.length - 1) {
      newline();
    }
  }
}
function genHoists(hoists, context) {
  if (!hoists.length) {
    return;
  }
  context.pure = true;
  const { push, newline, helper, scopeId, mode } = context;
  newline();
  for (let i = 0; i < hoists.length; i++) {
    const exp = hoists[i];
    if (exp) {
      push(`const _hoisted_${i + 1} = ${``}`);
      genNode(exp, context);
      newline();
    }
  }
  context.pure = false;
}
function isText$1(n) {
  return isString(n) || n.type === 4 || n.type === 2 || n.type === 5 || n.type === 8;
}
function genNodeListAsArray(nodes, context) {
  const multilines = nodes.length > 3 || nodes.some((n) => isArray(n) || !isText$1(n));
  context.push(`[`);
  multilines && context.indent();
  genNodeList(nodes, context, multilines);
  multilines && context.deindent();
  context.push(`]`);
}
function genNodeList(nodes, context, multilines = false, comma = true) {
  const { push, newline } = context;
  for (let i = 0; i < nodes.length; i++) {
    const node = nodes[i];
    if (isString(node)) {
      push(node);
    } else if (isArray(node)) {
      genNodeListAsArray(node, context);
    } else {
      genNode(node, context);
    }
    if (i < nodes.length - 1) {
      if (multilines) {
        comma && push(",");
        newline();
      } else {
        comma && push(", ");
      }
    }
  }
}
function genNode(node, context) {
  if (isString(node)) {
    context.push(node);
    return;
  }
  if (isSymbol(node)) {
    context.push(context.helper(node));
    return;
  }
  switch (node.type) {
    case 1:
    case 9:
    case 11:
      assert(node.codegenNode != null, `Codegen node is missing for element/if/for node. Apply appropriate transforms first.`);
      genNode(node.codegenNode, context);
      break;
    case 2:
      genText(node, context);
      break;
    case 4:
      genExpression(node, context);
      break;
    case 5:
      genInterpolation(node, context);
      break;
    case 12:
      genNode(node.codegenNode, context);
      break;
    case 8:
      genCompoundExpression(node, context);
      break;
    case 3:
      genComment(node, context);
      break;
    case 13:
      genVNodeCall(node, context);
      break;
    case 14:
      genCallExpression(node, context);
      break;
    case 15:
      genObjectExpression(node, context);
      break;
    case 17:
      genArrayExpression(node, context);
      break;
    case 18:
      genFunctionExpression(node, context);
      break;
    case 19:
      genConditionalExpression(node, context);
      break;
    case 20:
      genCacheExpression(node, context);
      break;
    case 21:
      genNodeList(node.body, context, true, false);
      break;
    case 22:
      break;
    case 23:
      break;
    case 24:
      break;
    case 25:
      break;
    case 26:
      break;
    case 10:
      break;
    default:
      if (true) {
        assert(false, `unhandled codegen node type: ${node.type}`);
        const exhaustiveCheck = node;
        return exhaustiveCheck;
      }
  }
}
function genText(node, context) {
  context.push(JSON.stringify(node.content), node);
}
function genExpression(node, context) {
  const { content, isStatic } = node;
  context.push(isStatic ? JSON.stringify(content) : content, node);
}
function genInterpolation(node, context) {
  const { push, helper, pure } = context;
  if (pure)
    push(PURE_ANNOTATION);
  push(`${helper(TO_DISPLAY_STRING)}(`);
  genNode(node.content, context);
  push(`)`);
}
function genCompoundExpression(node, context) {
  for (let i = 0; i < node.children.length; i++) {
    const child = node.children[i];
    if (isString(child)) {
      context.push(child);
    } else {
      genNode(child, context);
    }
  }
}
function genExpressionAsPropertyKey(node, context) {
  const { push } = context;
  if (node.type === 8) {
    push(`[`);
    genCompoundExpression(node, context);
    push(`]`);
  } else if (node.isStatic) {
    const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);
    push(text, node);
  } else {
    push(`[${node.content}]`, node);
  }
}
function genComment(node, context) {
  const { push, helper, pure } = context;
  if (pure) {
    push(PURE_ANNOTATION);
  }
  push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node);
}
function genVNodeCall(node, context) {
  const { push, helper, pure } = context;
  const { tag, props, children, patchFlag, dynamicProps, directives, isBlock, disableTracking, isComponent: isComponent2 } = node;
  if (directives) {
    push(helper(WITH_DIRECTIVES) + `(`);
  }
  if (isBlock) {
    push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
  }
  if (pure) {
    push(PURE_ANNOTATION);
  }
  const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent2) : getVNodeHelper(context.inSSR, isComponent2);
  push(helper(callHelper) + `(`, node);
  genNodeList(genNullableArgs([tag, props, children, patchFlag, dynamicProps]), context);
  push(`)`);
  if (isBlock) {
    push(`)`);
  }
  if (directives) {
    push(`, `);
    genNode(directives, context);
    push(`)`);
  }
}
function genNullableArgs(args) {
  let i = args.length;
  while (i--) {
    if (args[i] != null)
      break;
  }
  return args.slice(0, i + 1).map((arg) => arg || `null`);
}
function genCallExpression(node, context) {
  const { push, helper, pure } = context;
  const callee = isString(node.callee) ? node.callee : helper(node.callee);
  if (pure) {
    push(PURE_ANNOTATION);
  }
  push(callee + `(`, node);
  genNodeList(node.arguments, context);
  push(`)`);
}
function genObjectExpression(node, context) {
  const { push, indent, deindent, newline } = context;
  const { properties } = node;
  if (!properties.length) {
    push(`{}`, node);
    return;
  }
  const multilines = properties.length > 1 || properties.some((p) => p.value.type !== 4);
  push(multilines ? `{` : `{ `);
  multilines && indent();
  for (let i = 0; i < properties.length; i++) {
    const { key, value } = properties[i];
    genExpressionAsPropertyKey(key, context);
    push(`: `);
    genNode(value, context);
    if (i < properties.length - 1) {
      push(`,`);
      newline();
    }
  }
  multilines && deindent();
  push(multilines ? `}` : ` }`);
}
function genArrayExpression(node, context) {
  genNodeListAsArray(node.elements, context);
}
function genFunctionExpression(node, context) {
  const { push, indent, deindent } = context;
  const { params, returns, body, newline, isSlot } = node;
  if (isSlot) {
    push(`_${helperNameMap[WITH_CTX]}(`);
  }
  push(`(`, node);
  if (isArray(params)) {
    genNodeList(params, context);
  } else if (params) {
    genNode(params, context);
  }
  push(`) => `);
  if (newline || body) {
    push(`{`);
    indent();
  }
  if (returns) {
    if (newline) {
      push(`return `);
    }
    if (isArray(returns)) {
      genNodeListAsArray(returns, context);
    } else {
      genNode(returns, context);
    }
  } else if (body) {
    genNode(body, context);
  }
  if (newline || body) {
    deindent();
    push(`}`);
  }
  if (isSlot) {
    if (node.isNonScopedSlot) {
      push(`, undefined, true`);
    }
    push(`)`);
  }
}
function genConditionalExpression(node, context) {
  const { test, consequent, alternate, newline: needNewline } = node;
  const { push, indent, deindent, newline } = context;
  if (test.type === 4) {
    const needsParens = !isSimpleIdentifier(test.content);
    needsParens && push(`(`);
    genExpression(test, context);
    needsParens && push(`)`);
  } else {
    push(`(`);
    genNode(test, context);
    push(`)`);
  }
  needNewline && indent();
  context.indentLevel++;
  needNewline || push(` `);
  push(`? `);
  genNode(consequent, context);
  context.indentLevel--;
  needNewline && newline();
  needNewline || push(` `);
  push(`: `);
  const isNested = alternate.type === 19;
  if (!isNested) {
    context.indentLevel++;
  }
  genNode(alternate, context);
  if (!isNested) {
    context.indentLevel--;
  }
  needNewline && deindent(true);
}
function genCacheExpression(node, context) {
  const { push, helper, indent, deindent, newline } = context;
  push(`_cache[${node.index}] || (`);
  if (node.isVNode) {
    indent();
    push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
    newline();
  }
  push(`_cache[${node.index}] = `);
  genNode(node.value, context);
  if (node.isVNode) {
    push(`,`);
    newline();
    push(`${helper(SET_BLOCK_TRACKING)}(1),`);
    newline();
    push(`_cache[${node.index}]`);
    deindent();
  }
  push(`)`);
}
function walkIdentifiers(root, onIdentifier, includeAll = false, parentStack = [], knownIds = /* @__PURE__ */ Object.create(null)) {
  {
    return;
  }
}
function isReferencedIdentifier(id, parent, parentStack) {
  {
    return false;
  }
}
function isInDestructureAssignment(parent, parentStack) {
  if (parent && (parent.type === "ObjectProperty" || parent.type === "ArrayPattern")) {
    let i = parentStack.length;
    while (i--) {
      const p = parentStack[i];
      if (p.type === "AssignmentExpression") {
        return true;
      } else if (p.type !== "ObjectProperty" && !p.type.endsWith("Pattern")) {
        break;
      }
    }
  }
  return false;
}
function walkFunctionParams(node, onIdent) {
  for (const p of node.params) {
    for (const id of extractIdentifiers(p)) {
      onIdent(id);
    }
  }
}
function walkBlockDeclarations(block, onIdent) {
  for (const stmt of block.body) {
    if (stmt.type === "VariableDeclaration") {
      if (stmt.declare)
        continue;
      for (const decl of stmt.declarations) {
        for (const id of extractIdentifiers(decl.id)) {
          onIdent(id);
        }
      }
    } else if (stmt.type === "FunctionDeclaration" || stmt.type === "ClassDeclaration") {
      if (stmt.declare || !stmt.id)
        continue;
      onIdent(stmt.id);
    }
  }
}
function extractIdentifiers(param, nodes = []) {
  switch (param.type) {
    case "Identifier":
      nodes.push(param);
      break;
    case "MemberExpression":
      let object = param;
      while (object.type === "MemberExpression") {
        object = object.object;
      }
      nodes.push(object);
      break;
    case "ObjectPattern":
      for (const prop of param.properties) {
        if (prop.type === "RestElement") {
          extractIdentifiers(prop.argument, nodes);
        } else {
          extractIdentifiers(prop.value, nodes);
        }
      }
      break;
    case "ArrayPattern":
      param.elements.forEach((element) => {
        if (element)
          extractIdentifiers(element, nodes);
      });
      break;
    case "RestElement":
      extractIdentifiers(param.argument, nodes);
      break;
    case "AssignmentPattern":
      extractIdentifiers(param.left, nodes);
      break;
  }
  return nodes;
}
function validateBrowserExpression(node, context, asParams = false, asRawStatements = false) {
  const exp = node.content;
  if (!exp.trim()) {
    return;
  }
  try {
    new Function(asRawStatements ? ` ${exp} ` : `return ${asParams ? `(${exp}) => {}` : `(${exp})`}`);
  } catch (e) {
    let message = e.message;
    const keywordMatch = exp.replace(stripStringRE, "").match(prohibitedKeywordRE);
    if (keywordMatch) {
      message = `avoid using JavaScript keyword as property name: "${keywordMatch[0]}"`;
    }
    context.onError(createCompilerError(44, node.loc, void 0, message));
  }
}
function processExpression(node, context, asParams = false, asRawStatements = false, localVars = Object.create(context.identifiers)) {
  {
    if (true) {
      validateBrowserExpression(node, context, asParams, asRawStatements);
    }
    return node;
  }
}
function processIf(node, dir, context, processCodegen) {
  if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
    const loc = dir.exp ? dir.exp.loc : node.loc;
    context.onError(createCompilerError(28, dir.loc));
    dir.exp = createSimpleExpression(`true`, false, loc);
  }
  if (dir.exp) {
    validateBrowserExpression(dir.exp, context);
  }
  if (dir.name === "if") {
    const branch = createIfBranch(node, dir);
    const ifNode = {
      type: 9,
      loc: node.loc,
      branches: [branch]
    };
    context.replaceNode(ifNode);
    if (processCodegen) {
      return processCodegen(ifNode, branch, true);
    }
  } else {
    const siblings = context.parent.children;
    const comments = [];
    let i = siblings.indexOf(node);
    while (i-- >= -1) {
      const sibling = siblings[i];
      if (sibling && sibling.type === 3) {
        context.removeNode(sibling);
        comments.unshift(sibling);
        continue;
      }
      if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
        context.removeNode(sibling);
        continue;
      }
      if (sibling && sibling.type === 9) {
        if (dir.name === "else-if" && sibling.branches[sibling.branches.length - 1].condition === void 0) {
          context.onError(createCompilerError(30, node.loc));
        }
        context.removeNode();
        const branch = createIfBranch(node, dir);
        if (comments.length && !(context.parent && context.parent.type === 1 && isBuiltInType(context.parent.tag, "transition"))) {
          branch.children = [...comments, ...branch.children];
        }
        if (true) {
          const key = branch.userKey;
          if (key) {
            sibling.branches.forEach(({ userKey }) => {
              if (isSameKey(userKey, key)) {
                context.onError(createCompilerError(29, branch.userKey.loc));
              }
            });
          }
        }
        sibling.branches.push(branch);
        const onExit = processCodegen && processCodegen(sibling, branch, false);
        traverseNode(branch, context);
        if (onExit)
          onExit();
        context.currentNode = null;
      } else {
        context.onError(createCompilerError(30, node.loc));
      }
      break;
    }
  }
}
function createIfBranch(node, dir) {
  const isTemplateIf = node.tagType === 3;
  return {
    type: 10,
    loc: node.loc,
    condition: dir.name === "else" ? void 0 : dir.exp,
    children: isTemplateIf && !findDir(node, "for") ? node.children : [node],
    userKey: findProp(node, `key`),
    isTemplateIf
  };
}
function createCodegenNodeForBranch(branch, keyIndex, context) {
  if (branch.condition) {
    return createConditionalExpression(
      branch.condition,
      createChildrenCodegenNode(branch, keyIndex, context),
      createCallExpression(context.helper(CREATE_COMMENT), [
        true ? '"v-if"' : '""',
        "true"
      ])
    );
  } else {
    return createChildrenCodegenNode(branch, keyIndex, context);
  }
}
function createChildrenCodegenNode(branch, keyIndex, context) {
  const { helper } = context;
  const keyProperty = createObjectProperty(`key`, createSimpleExpression(`${keyIndex}`, false, locStub, 2));
  const { children } = branch;
  const firstChild = children[0];
  const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;
  if (needFragmentWrapper) {
    if (children.length === 1 && firstChild.type === 11) {
      const vnodeCall = firstChild.codegenNode;
      injectProp(vnodeCall, keyProperty, context);
      return vnodeCall;
    } else {
      let patchFlag = 64;
      let patchFlagText = PatchFlagNames[64];
      if (!branch.isTemplateIf && children.filter((c) => c.type !== 3).length === 1) {
        patchFlag |= 2048;
        patchFlagText += `, ${PatchFlagNames[2048]}`;
      }
      return createVNodeCall(context, helper(FRAGMENT), createObjectExpression([keyProperty]), children, patchFlag + (true ? ` /* ${patchFlagText} */` : ``), void 0, void 0, true, false, false, branch.loc);
    }
  } else {
    const ret = firstChild.codegenNode;
    const vnodeCall = getMemoedVNodeCall(ret);
    if (vnodeCall.type === 13) {
      makeBlock(vnodeCall, context);
    }
    injectProp(vnodeCall, keyProperty, context);
    return ret;
  }
}
function isSameKey(a, b) {
  if (!a || a.type !== b.type) {
    return false;
  }
  if (a.type === 6) {
    if (a.value.content !== b.value.content) {
      return false;
    }
  } else {
    const exp = a.exp;
    const branchExp = b.exp;
    if (exp.type !== branchExp.type) {
      return false;
    }
    if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {
      return false;
    }
  }
  return true;
}
function getParentCondition(node) {
  while (true) {
    if (node.type === 19) {
      if (node.alternate.type === 19) {
        node = node.alternate;
      } else {
        return node;
      }
    } else if (node.type === 20) {
      node = node.value;
    }
  }
}
function processFor(node, dir, context, processCodegen) {
  if (!dir.exp) {
    context.onError(createCompilerError(31, dir.loc));
    return;
  }
  const parseResult = parseForExpression(
    dir.exp,
    context
  );
  if (!parseResult) {
    context.onError(createCompilerError(32, dir.loc));
    return;
  }
  const { addIdentifiers, removeIdentifiers, scopes } = context;
  const { source, value, key, index } = parseResult;
  const forNode = {
    type: 11,
    loc: dir.loc,
    source,
    valueAlias: value,
    keyAlias: key,
    objectIndexAlias: index,
    parseResult,
    children: isTemplateNode(node) ? node.children : [node]
  };
  context.replaceNode(forNode);
  scopes.vFor++;
  const onExit = processCodegen && processCodegen(forNode);
  return () => {
    scopes.vFor--;
    if (onExit)
      onExit();
  };
}
function parseForExpression(input, context) {
  const loc = input.loc;
  const exp = input.content;
  const inMatch = exp.match(forAliasRE);
  if (!inMatch)
    return;
  const [, LHS, RHS] = inMatch;
  const result = {
    source: createAliasExpression(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),
    value: void 0,
    key: void 0,
    index: void 0
  };
  if (true) {
    validateBrowserExpression(result.source, context);
  }
  let valueContent = LHS.trim().replace(stripParensRE, "").trim();
  const trimmedOffset = LHS.indexOf(valueContent);
  const iteratorMatch = valueContent.match(forIteratorRE);
  if (iteratorMatch) {
    valueContent = valueContent.replace(forIteratorRE, "").trim();
    const keyContent = iteratorMatch[1].trim();
    let keyOffset;
    if (keyContent) {
      keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
      result.key = createAliasExpression(loc, keyContent, keyOffset);
      if (true) {
        validateBrowserExpression(result.key, context, true);
      }
    }
    if (iteratorMatch[2]) {
      const indexContent = iteratorMatch[2].trim();
      if (indexContent) {
        result.index = createAliasExpression(loc, indexContent, exp.indexOf(indexContent, result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length));
        if (true) {
          validateBrowserExpression(result.index, context, true);
        }
      }
    }
  }
  if (valueContent) {
    result.value = createAliasExpression(loc, valueContent, trimmedOffset);
    if (true) {
      validateBrowserExpression(result.value, context, true);
    }
  }
  return result;
}
function createAliasExpression(range, content, offset) {
  return createSimpleExpression(content, false, getInnerRange(range, offset, content.length));
}
function createForLoopParams({ value, key, index }, memoArgs = []) {
  return createParamsList([value, key, index, ...memoArgs]);
}
function createParamsList(args) {
  let i = args.length;
  while (i--) {
    if (args[i])
      break;
  }
  return args.slice(0, i + 1).map((arg, i2) => arg || createSimpleExpression(`_`.repeat(i2 + 1), false));
}
function buildSlots(node, context, buildSlotFn = buildClientSlotFn) {
  context.helper(WITH_CTX);
  const { children, loc } = node;
  const slotsProperties = [];
  const dynamicSlots = [];
  let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
  const onComponentSlot = findDir(node, "slot", true);
  if (onComponentSlot) {
    const { arg, exp } = onComponentSlot;
    if (arg && !isStaticExp(arg)) {
      hasDynamicSlots = true;
    }
    slotsProperties.push(createObjectProperty(arg || createSimpleExpression("default", true), buildSlotFn(exp, children, loc)));
  }
  let hasTemplateSlots = false;
  let hasNamedDefaultSlot = false;
  const implicitDefaultChildren = [];
  const seenSlotNames = /* @__PURE__ */ new Set();
  for (let i = 0; i < children.length; i++) {
    const slotElement = children[i];
    let slotDir;
    if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, "slot", true))) {
      if (slotElement.type !== 3) {
        implicitDefaultChildren.push(slotElement);
      }
      continue;
    }
    if (onComponentSlot) {
      context.onError(createCompilerError(37, slotDir.loc));
      break;
    }
    hasTemplateSlots = true;
    const { children: slotChildren, loc: slotLoc } = slotElement;
    const { arg: slotName = createSimpleExpression(`default`, true), exp: slotProps, loc: dirLoc } = slotDir;
    let staticSlotName;
    if (isStaticExp(slotName)) {
      staticSlotName = slotName ? slotName.content : `default`;
    } else {
      hasDynamicSlots = true;
    }
    const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
    let vIf;
    let vElse;
    let vFor;
    if (vIf = findDir(slotElement, "if")) {
      hasDynamicSlots = true;
      dynamicSlots.push(createConditionalExpression(vIf.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback));
    } else if (vElse = findDir(slotElement, /^else(-if)?$/, true)) {
      let j = i;
      let prev;
      while (j--) {
        prev = children[j];
        if (prev.type !== 3) {
          break;
        }
      }
      if (prev && isTemplateNode(prev) && findDir(prev, "if")) {
        children.splice(i, 1);
        i--;
        let conditional = dynamicSlots[dynamicSlots.length - 1];
        while (conditional.alternate.type === 19) {
          conditional = conditional.alternate;
        }
        conditional.alternate = vElse.exp ? createConditionalExpression(vElse.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback) : buildDynamicSlot(slotName, slotFunction);
      } else {
        context.onError(createCompilerError(30, vElse.loc));
      }
    } else if (vFor = findDir(slotElement, "for")) {
      hasDynamicSlots = true;
      const parseResult = vFor.parseResult || parseForExpression(vFor.exp, context);
      if (parseResult) {
        dynamicSlots.push(createCallExpression(context.helper(RENDER_LIST), [
          parseResult.source,
          createFunctionExpression(createForLoopParams(parseResult), buildDynamicSlot(slotName, slotFunction), true)
        ]));
      } else {
        context.onError(createCompilerError(32, vFor.loc));
      }
    } else {
      if (staticSlotName) {
        if (seenSlotNames.has(staticSlotName)) {
          context.onError(createCompilerError(38, dirLoc));
          continue;
        }
        seenSlotNames.add(staticSlotName);
        if (staticSlotName === "default") {
          hasNamedDefaultSlot = true;
        }
      }
      slotsProperties.push(createObjectProperty(slotName, slotFunction));
    }
  }
  if (!onComponentSlot) {
    const buildDefaultSlotProperty = (props, children2) => {
      const fn = buildSlotFn(props, children2, loc);
      if (context.compatConfig) {
        fn.isNonScopedSlot = true;
      }
      return createObjectProperty(`default`, fn);
    };
    if (!hasTemplateSlots) {
      slotsProperties.push(buildDefaultSlotProperty(void 0, children));
    } else if (implicitDefaultChildren.length && implicitDefaultChildren.some((node2) => isNonWhitespaceContent(node2))) {
      if (hasNamedDefaultSlot) {
        context.onError(createCompilerError(39, implicitDefaultChildren[0].loc));
      } else {
        slotsProperties.push(buildDefaultSlotProperty(void 0, implicitDefaultChildren));
      }
    }
  }
  const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node.children) ? 3 : 1;
  let slots = createObjectExpression(slotsProperties.concat(createObjectProperty(
    `_`,
    createSimpleExpression(slotFlag + (true ? ` /* ${slotFlagsText[slotFlag]} */` : ``), false)
  )), loc);
  if (dynamicSlots.length) {
    slots = createCallExpression(context.helper(CREATE_SLOTS), [
      slots,
      createArrayExpression(dynamicSlots)
    ]);
  }
  return {
    slots,
    hasDynamicSlots
  };
}
function buildDynamicSlot(name, fn) {
  return createObjectExpression([
    createObjectProperty(`name`, name),
    createObjectProperty(`fn`, fn)
  ]);
}
function hasForwardedSlots(children) {
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    switch (child.type) {
      case 1:
        if (child.tagType === 2 || hasForwardedSlots(child.children)) {
          return true;
        }
        break;
      case 9:
        if (hasForwardedSlots(child.branches))
          return true;
        break;
      case 10:
      case 11:
        if (hasForwardedSlots(child.children))
          return true;
        break;
    }
  }
  return false;
}
function isNonWhitespaceContent(node) {
  if (node.type !== 2 && node.type !== 12)
    return true;
  return node.type === 2 ? !!node.content.trim() : isNonWhitespaceContent(node.content);
}
function resolveComponentType(node, context, ssr = false) {
  let { tag } = node;
  const isExplicitDynamic = isComponentTag(tag);
  const isProp = findProp(node, "is");
  if (isProp) {
    if (isExplicitDynamic || isCompatEnabled("COMPILER_IS_ON_ELEMENT", context)) {
      const exp = isProp.type === 6 ? isProp.value && createSimpleExpression(isProp.value.content, true) : isProp.exp;
      if (exp) {
        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
          exp
        ]);
      }
    } else if (isProp.type === 6 && isProp.value.content.startsWith("vue:")) {
      tag = isProp.value.content.slice(4);
    }
  }
  const isDir = !isExplicitDynamic && findDir(node, "is");
  if (isDir && isDir.exp) {
    return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
      isDir.exp
    ]);
  }
  const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);
  if (builtIn) {
    if (!ssr)
      context.helper(builtIn);
    return builtIn;
  }
  context.helper(RESOLVE_COMPONENT);
  context.components.add(tag);
  return toValidAssetId(tag, `component`);
}
function buildProps(node, context, props = node.props, isComponent2, isDynamicComponent, ssr = false) {
  const { tag, loc: elementLoc, children } = node;
  let properties = [];
  const mergeArgs = [];
  const runtimeDirectives = [];
  const hasChildren = children.length > 0;
  let shouldUseBlock = false;
  let patchFlag = 0;
  let hasRef = false;
  let hasClassBinding = false;
  let hasStyleBinding = false;
  let hasHydrationEventBinding = false;
  let hasDynamicKeys = false;
  let hasVnodeHook = false;
  const dynamicPropNames = [];
  const analyzePatchFlag = ({ key, value }) => {
    if (isStaticExp(key)) {
      const name = key.content;
      const isEventHandler = isOn(name);
      if (isEventHandler && (!isComponent2 || isDynamicComponent) && name.toLowerCase() !== "onclick" && name !== "onUpdate:modelValue" && !isReservedProp(name)) {
        hasHydrationEventBinding = true;
      }
      if (isEventHandler && isReservedProp(name)) {
        hasVnodeHook = true;
      }
      if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType(value, context) > 0) {
        return;
      }
      if (name === "ref") {
        hasRef = true;
      } else if (name === "class") {
        hasClassBinding = true;
      } else if (name === "style") {
        hasStyleBinding = true;
      } else if (name !== "key" && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
      if (isComponent2 && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
    } else {
      hasDynamicKeys = true;
    }
  };
  for (let i = 0; i < props.length; i++) {
    const prop = props[i];
    if (prop.type === 6) {
      const { loc, name, value } = prop;
      let isStatic = true;
      if (name === "ref") {
        hasRef = true;
        if (context.scopes.vFor > 0) {
          properties.push(createObjectProperty(createSimpleExpression("ref_for", true), createSimpleExpression("true")));
        }
      }
      if (name === "is" && (isComponentTag(tag) || value && value.content.startsWith("vue:") || isCompatEnabled("COMPILER_IS_ON_ELEMENT", context))) {
        continue;
      }
      properties.push(createObjectProperty(createSimpleExpression(name, true, getInnerRange(loc, 0, name.length)), createSimpleExpression(value ? value.content : "", isStatic, value ? value.loc : loc)));
    } else {
      const { name, arg, exp, loc } = prop;
      const isVBind = name === "bind";
      const isVOn = name === "on";
      if (name === "slot") {
        if (!isComponent2) {
          context.onError(createCompilerError(40, loc));
        }
        continue;
      }
      if (name === "once" || name === "memo") {
        continue;
      }
      if (name === "is" || isVBind && isStaticArgOf(arg, "is") && (isComponentTag(tag) || isCompatEnabled("COMPILER_IS_ON_ELEMENT", context))) {
        continue;
      }
      if (isVOn && ssr) {
        continue;
      }
      if (isVBind && isStaticArgOf(arg, "key") || isVOn && hasChildren && isStaticArgOf(arg, "vue:before-update")) {
        shouldUseBlock = true;
      }
      if (isVBind && isStaticArgOf(arg, "ref") && context.scopes.vFor > 0) {
        properties.push(createObjectProperty(createSimpleExpression("ref_for", true), createSimpleExpression("true")));
      }
      if (!arg && (isVBind || isVOn)) {
        hasDynamicKeys = true;
        if (exp) {
          if (properties.length) {
            mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
            properties = [];
          }
          if (isVBind) {
            {
              if (true) {
                const hasOverridableKeys = mergeArgs.some((arg2) => {
                  if (arg2.type === 15) {
                    return arg2.properties.some(({ key }) => {
                      if (key.type !== 4 || !key.isStatic) {
                        return true;
                      }
                      return key.content !== "class" && key.content !== "style" && !isOn(key.content);
                    });
                  } else {
                    return true;
                  }
                });
                if (hasOverridableKeys) {
                  checkCompatEnabled("COMPILER_V_BIND_OBJECT_ORDER", context, loc);
                }
              }
              if (isCompatEnabled("COMPILER_V_BIND_OBJECT_ORDER", context)) {
                mergeArgs.unshift(exp);
                continue;
              }
            }
            mergeArgs.push(exp);
          } else {
            mergeArgs.push({
              type: 14,
              loc,
              callee: context.helper(TO_HANDLERS),
              arguments: [exp]
            });
          }
        } else {
          context.onError(createCompilerError(isVBind ? 34 : 35, loc));
        }
        continue;
      }
      const directiveTransform = context.directiveTransforms[name];
      if (directiveTransform) {
        const { props: props2, needRuntime } = directiveTransform(prop, node, context);
        !ssr && props2.forEach(analyzePatchFlag);
        properties.push(...props2);
        if (needRuntime) {
          runtimeDirectives.push(prop);
          if (isSymbol(needRuntime)) {
            directiveImportMap.set(prop, needRuntime);
          }
        }
      } else if (!isBuiltInDirective(name)) {
        runtimeDirectives.push(prop);
        if (hasChildren) {
          shouldUseBlock = true;
        }
      }
    }
  }
  let propsExpression = void 0;
  if (mergeArgs.length) {
    if (properties.length) {
      mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
    }
    if (mergeArgs.length > 1) {
      propsExpression = createCallExpression(context.helper(MERGE_PROPS), mergeArgs, elementLoc);
    } else {
      propsExpression = mergeArgs[0];
    }
  } else if (properties.length) {
    propsExpression = createObjectExpression(dedupeProperties(properties), elementLoc);
  }
  if (hasDynamicKeys) {
    patchFlag |= 16;
  } else {
    if (hasClassBinding && !isComponent2) {
      patchFlag |= 2;
    }
    if (hasStyleBinding && !isComponent2) {
      patchFlag |= 4;
    }
    if (dynamicPropNames.length) {
      patchFlag |= 8;
    }
    if (hasHydrationEventBinding) {
      patchFlag |= 32;
    }
  }
  if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
    patchFlag |= 512;
  }
  if (!context.inSSR && propsExpression) {
    switch (propsExpression.type) {
      case 15:
        let classKeyIndex = -1;
        let styleKeyIndex = -1;
        let hasDynamicKey = false;
        for (let i = 0; i < propsExpression.properties.length; i++) {
          const key = propsExpression.properties[i].key;
          if (isStaticExp(key)) {
            if (key.content === "class") {
              classKeyIndex = i;
            } else if (key.content === "style") {
              styleKeyIndex = i;
            }
          } else if (!key.isHandlerKey) {
            hasDynamicKey = true;
          }
        }
        const classProp = propsExpression.properties[classKeyIndex];
        const styleProp = propsExpression.properties[styleKeyIndex];
        if (!hasDynamicKey) {
          if (classProp && !isStaticExp(classProp.value)) {
            classProp.value = createCallExpression(context.helper(NORMALIZE_CLASS), [classProp.value]);
          }
          if (styleProp && (hasStyleBinding || styleProp.value.type === 4 && styleProp.value.content.trim()[0] === `[` || styleProp.value.type === 17)) {
            styleProp.value = createCallExpression(context.helper(NORMALIZE_STYLE), [styleProp.value]);
          }
        } else {
          propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [propsExpression]);
        }
        break;
      case 14:
        break;
      default:
        propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [
          createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [
            propsExpression
          ])
        ]);
        break;
    }
  }
  return {
    props: propsExpression,
    directives: runtimeDirectives,
    patchFlag,
    dynamicPropNames,
    shouldUseBlock
  };
}
function dedupeProperties(properties) {
  const knownProps = /* @__PURE__ */ new Map();
  const deduped = [];
  for (let i = 0; i < properties.length; i++) {
    const prop = properties[i];
    if (prop.key.type === 8 || !prop.key.isStatic) {
      deduped.push(prop);
      continue;
    }
    const name = prop.key.content;
    const existing = knownProps.get(name);
    if (existing) {
      if (name === "style" || name === "class" || isOn(name)) {
        mergeAsArray(existing, prop);
      }
    } else {
      knownProps.set(name, prop);
      deduped.push(prop);
    }
  }
  return deduped;
}
function mergeAsArray(existing, incoming) {
  if (existing.value.type === 17) {
    existing.value.elements.push(incoming.value);
  } else {
    existing.value = createArrayExpression([existing.value, incoming.value], existing.loc);
  }
}
function buildDirectiveArgs(dir, context) {
  const dirArgs = [];
  const runtime = directiveImportMap.get(dir);
  if (runtime) {
    dirArgs.push(context.helperString(runtime));
  } else {
    {
      context.helper(RESOLVE_DIRECTIVE);
      context.directives.add(dir.name);
      dirArgs.push(toValidAssetId(dir.name, `directive`));
    }
  }
  const { loc } = dir;
  if (dir.exp)
    dirArgs.push(dir.exp);
  if (dir.arg) {
    if (!dir.exp) {
      dirArgs.push(`void 0`);
    }
    dirArgs.push(dir.arg);
  }
  if (Object.keys(dir.modifiers).length) {
    if (!dir.arg) {
      if (!dir.exp) {
        dirArgs.push(`void 0`);
      }
      dirArgs.push(`void 0`);
    }
    const trueExpression = createSimpleExpression(`true`, false, loc);
    dirArgs.push(createObjectExpression(dir.modifiers.map((modifier) => createObjectProperty(modifier, trueExpression)), loc));
  }
  return createArrayExpression(dirArgs, dir.loc);
}
function stringifyDynamicPropNames(props) {
  let propsNamesString = `[`;
  for (let i = 0, l = props.length; i < l; i++) {
    propsNamesString += JSON.stringify(props[i]);
    if (i < l - 1)
      propsNamesString += ", ";
  }
  return propsNamesString + `]`;
}
function isComponentTag(tag) {
  return tag === "component" || tag === "Component";
}
function processSlotOutlet(node, context) {
  let slotName = `"default"`;
  let slotProps = void 0;
  const nonNameProps = [];
  for (let i = 0; i < node.props.length; i++) {
    const p = node.props[i];
    if (p.type === 6) {
      if (p.value) {
        if (p.name === "name") {
          slotName = JSON.stringify(p.value.content);
        } else {
          p.name = camelize2(p.name);
          nonNameProps.push(p);
        }
      }
    } else {
      if (p.name === "bind" && isStaticArgOf(p.arg, "name")) {
        if (p.exp)
          slotName = p.exp;
      } else {
        if (p.name === "bind" && p.arg && isStaticExp(p.arg)) {
          p.arg.content = camelize2(p.arg.content);
        }
        nonNameProps.push(p);
      }
    }
  }
  if (nonNameProps.length > 0) {
    const { props, directives } = buildProps(node, context, nonNameProps, false, false);
    slotProps = props;
    if (directives.length) {
      context.onError(createCompilerError(36, directives[0].loc));
    }
  }
  return {
    slotName,
    slotProps
  };
}
function createTransformProps(props = []) {
  return { props };
}
function rewriteFilter(node, context) {
  if (node.type === 4) {
    parseFilter(node, context);
  } else {
    for (let i = 0; i < node.children.length; i++) {
      const child = node.children[i];
      if (typeof child !== "object")
        continue;
      if (child.type === 4) {
        parseFilter(child, context);
      } else if (child.type === 8) {
        rewriteFilter(node, context);
      } else if (child.type === 5) {
        rewriteFilter(child.content, context);
      }
    }
  }
}
function parseFilter(node, context) {
  const exp = node.content;
  let inSingle = false;
  let inDouble = false;
  let inTemplateString = false;
  let inRegex = false;
  let curly = 0;
  let square = 0;
  let paren = 0;
  let lastFilterIndex = 0;
  let c, prev, i, expression, filters = [];
  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 39 && prev !== 92)
        inSingle = false;
    } else if (inDouble) {
      if (c === 34 && prev !== 92)
        inDouble = false;
    } else if (inTemplateString) {
      if (c === 96 && prev !== 92)
        inTemplateString = false;
    } else if (inRegex) {
      if (c === 47 && prev !== 92)
        inRegex = false;
    } else if (c === 124 && exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {
      if (expression === void 0) {
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 34:
          inDouble = true;
          break;
        case 39:
          inSingle = true;
          break;
        case 96:
          inTemplateString = true;
          break;
        case 40:
          paren++;
          break;
        case 41:
          paren--;
          break;
        case 91:
          square++;
          break;
        case 93:
          square--;
          break;
        case 123:
          curly++;
          break;
        case 125:
          curly--;
          break;
      }
      if (c === 47) {
        let j = i - 1;
        let p;
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== " ")
            break;
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }
  if (expression === void 0) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }
  function pushFilter() {
    filters.push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }
  if (filters.length) {
    warnDeprecation("COMPILER_FILTER", context, node.loc);
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i], context);
    }
    node.content = expression;
  }
}
function wrapFilter(exp, filter, context) {
  context.helper(RESOLVE_FILTER);
  const i = filter.indexOf("(");
  if (i < 0) {
    context.filters.add(filter);
    return `${toValidAssetId(filter, "filter")}(${exp})`;
  } else {
    const name = filter.slice(0, i);
    const args = filter.slice(i + 1);
    context.filters.add(name);
    return `${toValidAssetId(name, "filter")}(${exp}${args !== ")" ? "," + args : args}`;
  }
}
function getBaseTransformPreset(prefixIdentifiers) {
  return [
    [
      transformOnce,
      transformIf,
      transformMemo,
      transformFor,
      ...[transformFilter],
      ...true ? [transformExpression] : [],
      transformSlotOutlet,
      transformElement,
      trackSlotScopes,
      transformText
    ],
    {
      on: transformOn,
      bind: transformBind,
      model: transformModel
    }
  ];
}
function baseCompile(template, options = {}) {
  const onError = options.onError || defaultOnError;
  const isModuleMode = options.mode === "module";
  {
    if (options.prefixIdentifiers === true) {
      onError(createCompilerError(46));
    } else if (isModuleMode) {
      onError(createCompilerError(47));
    }
  }
  const prefixIdentifiers = false;
  if (options.cacheHandlers) {
    onError(createCompilerError(48));
  }
  if (options.scopeId && !isModuleMode) {
    onError(createCompilerError(49));
  }
  const ast = isString(template) ? baseParse(template, options) : template;
  const [nodeTransforms, directiveTransforms] = getBaseTransformPreset();
  transform(ast, extend({}, options, {
    prefixIdentifiers,
    nodeTransforms: [
      ...nodeTransforms,
      ...options.nodeTransforms || []
    ],
    directiveTransforms: extend(
      {},
      directiveTransforms,
      options.directiveTransforms || {}
    )
  }));
  return generate(ast, extend({}, options, {
    prefixIdentifiers
  }));
}
var errorMessages, FRAGMENT, TELEPORT, SUSPENSE, KEEP_ALIVE, BASE_TRANSITION, OPEN_BLOCK, CREATE_BLOCK, CREATE_ELEMENT_BLOCK, CREATE_VNODE, CREATE_ELEMENT_VNODE, CREATE_COMMENT, CREATE_TEXT, CREATE_STATIC, RESOLVE_COMPONENT, RESOLVE_DYNAMIC_COMPONENT, RESOLVE_DIRECTIVE, RESOLVE_FILTER, WITH_DIRECTIVES, RENDER_LIST, RENDER_SLOT, CREATE_SLOTS, TO_DISPLAY_STRING, MERGE_PROPS, NORMALIZE_CLASS, NORMALIZE_STYLE, NORMALIZE_PROPS, GUARD_REACTIVE_PROPS, TO_HANDLERS, CAMELIZE, CAPITALIZE, TO_HANDLER_KEY, SET_BLOCK_TRACKING, PUSH_SCOPE_ID, POP_SCOPE_ID, WITH_CTX, UNREF, IS_REF, WITH_MEMO, IS_MEMO_SAME, helperNameMap, locStub, isStaticExp, isBuiltInType, nonIdentifierRE, isSimpleIdentifier, validFirstIdentCharRE, validIdentCharRE, whitespaceRE, isMemberExpressionBrowser, isMemberExpressionNode, isMemberExpression, propsHelperSet, deprecationData, decodeRE, decodeMap, defaultParserOptions, isSpecialTemplateDirective, allowHoistedHelperSet, PURE_ANNOTATION, aliasHelper, isFunctionType, isStaticProperty, isStaticPropertyKey, prohibitedKeywordRE, stripStringRE, transformExpression, transformIf, transformFor, forAliasRE, forIteratorRE, stripParensRE, defaultFallback, trackSlotScopes, trackVForSlotScopes, buildClientSlotFn, directiveImportMap, transformElement, cacheStringFunction, camelizeRE, camelize2, transformSlotOutlet, fnExpRE, transformOn, transformBind, injectPrefix, transformText, seen, transformOnce, transformModel, validDivisionCharRE, transformFilter, seen$1, transformMemo, noopDirectiveTransform;
var init_compiler_core_esm_bundler = __esm({
  "node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js"() {
    init_shared_esm_bundler();
    init_shared_esm_bundler();
    errorMessages = {
      [0]: "Illegal comment.",
      [1]: "CDATA section is allowed only in XML context.",
      [2]: "Duplicate attribute.",
      [3]: "End tag cannot have attributes.",
      [4]: "Illegal '/' in tags.",
      [5]: "Unexpected EOF in tag.",
      [6]: "Unexpected EOF in CDATA section.",
      [7]: "Unexpected EOF in comment.",
      [8]: "Unexpected EOF in script.",
      [9]: "Unexpected EOF in tag.",
      [10]: "Incorrectly closed comment.",
      [11]: "Incorrectly opened comment.",
      [12]: "Illegal tag name. Use '&lt;' to print '<'.",
      [13]: "Attribute value was expected.",
      [14]: "End tag name was expected.",
      [15]: "Whitespace was expected.",
      [16]: "Unexpected '<!--' in comment.",
      [17]: `Attribute name cannot contain U+0022 ("), U+0027 ('), and U+003C (<).`,
      [18]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
      [19]: "Attribute name cannot start with '='.",
      [21]: "'<?' is allowed only in XML context.",
      [20]: `Unexpected null character.`,
      [22]: "Illegal '/' in tags.",
      [23]: "Invalid end tag.",
      [24]: "Element is missing end tag.",
      [25]: "Interpolation end sign was not found.",
      [27]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
      [26]: "Legal directive name was expected.",
      [28]: `v-if/v-else-if is missing expression.`,
      [29]: `v-if/else branches must use unique keys.`,
      [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,
      [31]: `v-for is missing expression.`,
      [32]: `v-for has invalid expression.`,
      [33]: `<template v-for> key should be placed on the <template> tag.`,
      [34]: `v-bind is missing expression.`,
      [35]: `v-on is missing expression.`,
      [36]: `Unexpected custom directive on <slot> outlet.`,
      [37]: `Mixed v-slot usage on both the component and nested <template>.When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,
      [38]: `Duplicate slot names found. `,
      [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,
      [40]: `v-slot can only be used on components or <template> tags.`,
      [41]: `v-model is missing expression.`,
      [42]: `v-model value must be a valid JavaScript member expression.`,
      [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
      [44]: `Error parsing JavaScript expression: `,
      [45]: `<KeepAlive> expects exactly one child component.`,
      [46]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
      [47]: `ES module mode is not supported in this build of compiler.`,
      [48]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
      [49]: `"scopeId" option is only supported in module mode.`,
      [50]: ``
    };
    FRAGMENT = Symbol(true ? `Fragment` : ``);
    TELEPORT = Symbol(true ? `Teleport` : ``);
    SUSPENSE = Symbol(true ? `Suspense` : ``);
    KEEP_ALIVE = Symbol(true ? `KeepAlive` : ``);
    BASE_TRANSITION = Symbol(true ? `BaseTransition` : ``);
    OPEN_BLOCK = Symbol(true ? `openBlock` : ``);
    CREATE_BLOCK = Symbol(true ? `createBlock` : ``);
    CREATE_ELEMENT_BLOCK = Symbol(true ? `createElementBlock` : ``);
    CREATE_VNODE = Symbol(true ? `createVNode` : ``);
    CREATE_ELEMENT_VNODE = Symbol(true ? `createElementVNode` : ``);
    CREATE_COMMENT = Symbol(true ? `createCommentVNode` : ``);
    CREATE_TEXT = Symbol(true ? `createTextVNode` : ``);
    CREATE_STATIC = Symbol(true ? `createStaticVNode` : ``);
    RESOLVE_COMPONENT = Symbol(true ? `resolveComponent` : ``);
    RESOLVE_DYNAMIC_COMPONENT = Symbol(true ? `resolveDynamicComponent` : ``);
    RESOLVE_DIRECTIVE = Symbol(true ? `resolveDirective` : ``);
    RESOLVE_FILTER = Symbol(true ? `resolveFilter` : ``);
    WITH_DIRECTIVES = Symbol(true ? `withDirectives` : ``);
    RENDER_LIST = Symbol(true ? `renderList` : ``);
    RENDER_SLOT = Symbol(true ? `renderSlot` : ``);
    CREATE_SLOTS = Symbol(true ? `createSlots` : ``);
    TO_DISPLAY_STRING = Symbol(true ? `toDisplayString` : ``);
    MERGE_PROPS = Symbol(true ? `mergeProps` : ``);
    NORMALIZE_CLASS = Symbol(true ? `normalizeClass` : ``);
    NORMALIZE_STYLE = Symbol(true ? `normalizeStyle` : ``);
    NORMALIZE_PROPS = Symbol(true ? `normalizeProps` : ``);
    GUARD_REACTIVE_PROPS = Symbol(true ? `guardReactiveProps` : ``);
    TO_HANDLERS = Symbol(true ? `toHandlers` : ``);
    CAMELIZE = Symbol(true ? `camelize` : ``);
    CAPITALIZE = Symbol(true ? `capitalize` : ``);
    TO_HANDLER_KEY = Symbol(true ? `toHandlerKey` : ``);
    SET_BLOCK_TRACKING = Symbol(true ? `setBlockTracking` : ``);
    PUSH_SCOPE_ID = Symbol(true ? `pushScopeId` : ``);
    POP_SCOPE_ID = Symbol(true ? `popScopeId` : ``);
    WITH_CTX = Symbol(true ? `withCtx` : ``);
    UNREF = Symbol(true ? `unref` : ``);
    IS_REF = Symbol(true ? `isRef` : ``);
    WITH_MEMO = Symbol(true ? `withMemo` : ``);
    IS_MEMO_SAME = Symbol(true ? `isMemoSame` : ``);
    helperNameMap = {
      [FRAGMENT]: `Fragment`,
      [TELEPORT]: `Teleport`,
      [SUSPENSE]: `Suspense`,
      [KEEP_ALIVE]: `KeepAlive`,
      [BASE_TRANSITION]: `BaseTransition`,
      [OPEN_BLOCK]: `openBlock`,
      [CREATE_BLOCK]: `createBlock`,
      [CREATE_ELEMENT_BLOCK]: `createElementBlock`,
      [CREATE_VNODE]: `createVNode`,
      [CREATE_ELEMENT_VNODE]: `createElementVNode`,
      [CREATE_COMMENT]: `createCommentVNode`,
      [CREATE_TEXT]: `createTextVNode`,
      [CREATE_STATIC]: `createStaticVNode`,
      [RESOLVE_COMPONENT]: `resolveComponent`,
      [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
      [RESOLVE_DIRECTIVE]: `resolveDirective`,
      [RESOLVE_FILTER]: `resolveFilter`,
      [WITH_DIRECTIVES]: `withDirectives`,
      [RENDER_LIST]: `renderList`,
      [RENDER_SLOT]: `renderSlot`,
      [CREATE_SLOTS]: `createSlots`,
      [TO_DISPLAY_STRING]: `toDisplayString`,
      [MERGE_PROPS]: `mergeProps`,
      [NORMALIZE_CLASS]: `normalizeClass`,
      [NORMALIZE_STYLE]: `normalizeStyle`,
      [NORMALIZE_PROPS]: `normalizeProps`,
      [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,
      [TO_HANDLERS]: `toHandlers`,
      [CAMELIZE]: `camelize`,
      [CAPITALIZE]: `capitalize`,
      [TO_HANDLER_KEY]: `toHandlerKey`,
      [SET_BLOCK_TRACKING]: `setBlockTracking`,
      [PUSH_SCOPE_ID]: `pushScopeId`,
      [POP_SCOPE_ID]: `popScopeId`,
      [WITH_CTX]: `withCtx`,
      [UNREF]: `unref`,
      [IS_REF]: `isRef`,
      [WITH_MEMO]: `withMemo`,
      [IS_MEMO_SAME]: `isMemoSame`
    };
    locStub = {
      source: "",
      start: { line: 1, column: 1, offset: 0 },
      end: { line: 1, column: 1, offset: 0 }
    };
    isStaticExp = (p) => p.type === 4 && p.isStatic;
    isBuiltInType = (tag, expected) => tag === expected || tag === hyphenate(expected);
    nonIdentifierRE = /^\d|[^\$\w]/;
    isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
    validFirstIdentCharRE = /[A-Za-z_$\xA0-\uFFFF]/;
    validIdentCharRE = /[\.\?\w$\xA0-\uFFFF]/;
    whitespaceRE = /\s+[.[]\s*|\s*[.[]\s+/g;
    isMemberExpressionBrowser = (path) => {
      path = path.trim().replace(whitespaceRE, (s) => s.trim());
      let state = 0;
      let stateStack = [];
      let currentOpenBracketCount = 0;
      let currentOpenParensCount = 0;
      let currentStringType = null;
      for (let i = 0; i < path.length; i++) {
        const char = path.charAt(i);
        switch (state) {
          case 0:
            if (char === "[") {
              stateStack.push(state);
              state = 1;
              currentOpenBracketCount++;
            } else if (char === "(") {
              stateStack.push(state);
              state = 2;
              currentOpenParensCount++;
            } else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {
              return false;
            }
            break;
          case 1:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `[`) {
              currentOpenBracketCount++;
            } else if (char === `]`) {
              if (!--currentOpenBracketCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 2:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `(`) {
              currentOpenParensCount++;
            } else if (char === `)`) {
              if (i === path.length - 1) {
                return false;
              }
              if (!--currentOpenParensCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 3:
            if (char === currentStringType) {
              state = stateStack.pop();
              currentStringType = null;
            }
            break;
        }
      }
      return !currentOpenBracketCount && !currentOpenParensCount;
    };
    isMemberExpressionNode = NOOP;
    isMemberExpression = isMemberExpressionBrowser;
    propsHelperSet = /* @__PURE__ */ new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);
    deprecationData = {
      ["COMPILER_IS_ON_ELEMENT"]: {
        message: `Platform-native elements with "is" prop will no longer be treated as components in Vue 3 unless the "is" value is explicitly prefixed with "vue:".`,
        link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`
      },
      ["COMPILER_V_BIND_SYNC"]: {
        message: (key) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \`v-bind:${key}.sync\` should be changed to \`v-model:${key}\`.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`
      },
      ["COMPILER_V_BIND_PROP"]: {
        message: `.prop modifier for v-bind has been removed and no longer necessary. Vue 3 will automatically set a binding as DOM property when appropriate.`
      },
      ["COMPILER_V_BIND_OBJECT_ORDER"]: {
        message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`
      },
      ["COMPILER_V_ON_NATIVE"]: {
        message: `.native modifier for v-on has been removed as is no longer necessary.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`
      },
      ["COMPILER_V_IF_V_FOR_PRECEDENCE"]: {
        message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`
      },
      ["COMPILER_NATIVE_TEMPLATE"]: {
        message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`
      },
      ["COMPILER_INLINE_TEMPLATE"]: {
        message: `"inline-template" has been removed in Vue 3.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`
      },
      ["COMPILER_FILTER"]: {
        message: `filters have been removed in Vue 3. The "|" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`
      }
    };
    decodeRE = /&(gt|lt|amp|apos|quot);/g;
    decodeMap = {
      gt: ">",
      lt: "<",
      amp: "&",
      apos: "'",
      quot: '"'
    };
    defaultParserOptions = {
      delimiters: [`{{`, `}}`],
      getNamespace: () => 0,
      getTextMode: () => 0,
      isVoidTag: NO,
      isPreTag: NO,
      isCustomElement: NO,
      decodeEntities: (rawText) => rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),
      onError: defaultOnError,
      onWarn: defaultOnWarn,
      comments: true
    };
    isSpecialTemplateDirective = makeMap(`if,else,else-if,for,slot`);
    allowHoistedHelperSet = /* @__PURE__ */ new Set([
      NORMALIZE_CLASS,
      NORMALIZE_STYLE,
      NORMALIZE_PROPS,
      GUARD_REACTIVE_PROPS
    ]);
    PURE_ANNOTATION = `/*#__PURE__*/`;
    aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;
    isFunctionType = (node) => {
      return /Function(?:Expression|Declaration)$|Method$/.test(node.type);
    };
    isStaticProperty = (node) => node && (node.type === "ObjectProperty" || node.type === "ObjectMethod") && !node.computed;
    isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;
    prohibitedKeywordRE = new RegExp("\\b" + "do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments,typeof,void".split(",").join("\\b|\\b") + "\\b");
    stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;
    transformExpression = (node, context) => {
      if (node.type === 5) {
        node.content = processExpression(node.content, context);
      } else if (node.type === 1) {
        for (let i = 0; i < node.props.length; i++) {
          const dir = node.props[i];
          if (dir.type === 7 && dir.name !== "for") {
            const exp = dir.exp;
            const arg = dir.arg;
            if (exp && exp.type === 4 && !(dir.name === "on" && arg)) {
              dir.exp = processExpression(
                exp,
                context,
                dir.name === "slot"
              );
            }
            if (arg && arg.type === 4 && !arg.isStatic) {
              dir.arg = processExpression(arg, context);
            }
          }
        }
      }
    };
    transformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, (node, dir, context) => {
      return processIf(node, dir, context, (ifNode, branch, isRoot) => {
        const siblings = context.parent.children;
        let i = siblings.indexOf(ifNode);
        let key = 0;
        while (i-- >= 0) {
          const sibling = siblings[i];
          if (sibling && sibling.type === 9) {
            key += sibling.branches.length;
          }
        }
        return () => {
          if (isRoot) {
            ifNode.codegenNode = createCodegenNodeForBranch(branch, key, context);
          } else {
            const parentCondition = getParentCondition(ifNode.codegenNode);
            parentCondition.alternate = createCodegenNodeForBranch(branch, key + ifNode.branches.length - 1, context);
          }
        };
      });
    });
    transformFor = createStructuralDirectiveTransform("for", (node, dir, context) => {
      const { helper, removeHelper } = context;
      return processFor(node, dir, context, (forNode) => {
        const renderExp = createCallExpression(helper(RENDER_LIST), [
          forNode.source
        ]);
        const isTemplate = isTemplateNode(node);
        const memo = findDir(node, "memo");
        const keyProp = findProp(node, `key`);
        const keyExp = keyProp && (keyProp.type === 6 ? createSimpleExpression(keyProp.value.content, true) : keyProp.exp);
        const keyProperty = keyProp ? createObjectProperty(`key`, keyExp) : null;
        const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
        const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
        forNode.codegenNode = createVNodeCall(context, helper(FRAGMENT), void 0, renderExp, fragmentFlag + (true ? ` /* ${PatchFlagNames[fragmentFlag]} */` : ``), void 0, void 0, true, !isStableFragment, false, node.loc);
        return () => {
          let childBlock;
          const { children } = forNode;
          if (isTemplate) {
            node.children.some((c) => {
              if (c.type === 1) {
                const key = findProp(c, "key");
                if (key) {
                  context.onError(createCompilerError(33, key.loc));
                  return true;
                }
              }
            });
          }
          const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;
          const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] : null;
          if (slotOutlet) {
            childBlock = slotOutlet.codegenNode;
            if (isTemplate && keyProperty) {
              injectProp(childBlock, keyProperty, context);
            }
          } else if (needFragmentWrapper) {
            childBlock = createVNodeCall(context, helper(FRAGMENT), keyProperty ? createObjectExpression([keyProperty]) : void 0, node.children, 64 + (true ? ` /* ${PatchFlagNames[64]} */` : ``), void 0, void 0, true, void 0, false);
          } else {
            childBlock = children[0].codegenNode;
            if (isTemplate && keyProperty) {
              injectProp(childBlock, keyProperty, context);
            }
            if (childBlock.isBlock !== !isStableFragment) {
              if (childBlock.isBlock) {
                removeHelper(OPEN_BLOCK);
                removeHelper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
              } else {
                removeHelper(getVNodeHelper(context.inSSR, childBlock.isComponent));
              }
            }
            childBlock.isBlock = !isStableFragment;
            if (childBlock.isBlock) {
              helper(OPEN_BLOCK);
              helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
            } else {
              helper(getVNodeHelper(context.inSSR, childBlock.isComponent));
            }
          }
          if (memo) {
            const loop = createFunctionExpression(createForLoopParams(forNode.parseResult, [
              createSimpleExpression(`_cached`)
            ]));
            loop.body = createBlockStatement([
              createCompoundExpression([`const _memo = (`, memo.exp, `)`]),
              createCompoundExpression([
                `if (_cached`,
                ...keyExp ? [` && _cached.key === `, keyExp] : [],
                ` && ${context.helperString(IS_MEMO_SAME)}(_cached, _memo)) return _cached`
              ]),
              createCompoundExpression([`const _item = `, childBlock]),
              createSimpleExpression(`_item.memo = _memo`),
              createSimpleExpression(`return _item`)
            ]);
            renderExp.arguments.push(loop, createSimpleExpression(`_cache`), createSimpleExpression(String(context.cached++)));
          } else {
            renderExp.arguments.push(createFunctionExpression(createForLoopParams(forNode.parseResult), childBlock, true));
          }
        };
      });
    });
    forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    stripParensRE = /^\(|\)$/g;
    defaultFallback = createSimpleExpression(`undefined`, false);
    trackSlotScopes = (node, context) => {
      if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {
        const vSlot = findDir(node, "slot");
        if (vSlot) {
          vSlot.exp;
          context.scopes.vSlot++;
          return () => {
            context.scopes.vSlot--;
          };
        }
      }
    };
    trackVForSlotScopes = (node, context) => {
      let vFor;
      if (isTemplateNode(node) && node.props.some(isVSlot) && (vFor = findDir(node, "for"))) {
        const result = vFor.parseResult = parseForExpression(vFor.exp, context);
        if (result) {
          const { value, key, index } = result;
          const { addIdentifiers, removeIdentifiers } = context;
          value && addIdentifiers(value);
          key && addIdentifiers(key);
          index && addIdentifiers(index);
          return () => {
            value && removeIdentifiers(value);
            key && removeIdentifiers(key);
            index && removeIdentifiers(index);
          };
        }
      }
    };
    buildClientSlotFn = (props, children, loc) => createFunctionExpression(props, children, false, true, children.length ? children[0].loc : loc);
    directiveImportMap = /* @__PURE__ */ new WeakMap();
    transformElement = (node, context) => {
      return function postTransformElement() {
        node = context.currentNode;
        if (!(node.type === 1 && (node.tagType === 0 || node.tagType === 1))) {
          return;
        }
        const { tag, props } = node;
        const isComponent2 = node.tagType === 1;
        let vnodeTag = isComponent2 ? resolveComponentType(node, context) : `"${tag}"`;
        const isDynamicComponent = isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
        let vnodeProps;
        let vnodeChildren;
        let vnodePatchFlag;
        let patchFlag = 0;
        let vnodeDynamicProps;
        let dynamicPropNames;
        let vnodeDirectives;
        let shouldUseBlock = isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent2 && (tag === "svg" || tag === "foreignObject");
        if (props.length > 0) {
          const propsBuildResult = buildProps(node, context, void 0, isComponent2, isDynamicComponent);
          vnodeProps = propsBuildResult.props;
          patchFlag = propsBuildResult.patchFlag;
          dynamicPropNames = propsBuildResult.dynamicPropNames;
          const directives = propsBuildResult.directives;
          vnodeDirectives = directives && directives.length ? createArrayExpression(directives.map((dir) => buildDirectiveArgs(dir, context))) : void 0;
          if (propsBuildResult.shouldUseBlock) {
            shouldUseBlock = true;
          }
        }
        if (node.children.length > 0) {
          if (vnodeTag === KEEP_ALIVE) {
            shouldUseBlock = true;
            patchFlag |= 1024;
            if (node.children.length > 1) {
              context.onError(createCompilerError(45, {
                start: node.children[0].loc.start,
                end: node.children[node.children.length - 1].loc.end,
                source: ""
              }));
            }
          }
          const shouldBuildAsSlots = isComponent2 && vnodeTag !== TELEPORT && vnodeTag !== KEEP_ALIVE;
          if (shouldBuildAsSlots) {
            const { slots, hasDynamicSlots } = buildSlots(node, context);
            vnodeChildren = slots;
            if (hasDynamicSlots) {
              patchFlag |= 1024;
            }
          } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
            const child = node.children[0];
            const type = child.type;
            const hasDynamicTextChild = type === 5 || type === 8;
            if (hasDynamicTextChild && getConstantType(child, context) === 0) {
              patchFlag |= 1;
            }
            if (hasDynamicTextChild || type === 2) {
              vnodeChildren = child;
            } else {
              vnodeChildren = node.children;
            }
          } else {
            vnodeChildren = node.children;
          }
        }
        if (patchFlag !== 0) {
          if (true) {
            if (patchFlag < 0) {
              vnodePatchFlag = patchFlag + ` /* ${PatchFlagNames[patchFlag]} */`;
            } else {
              const flagNames = Object.keys(PatchFlagNames).map(Number).filter((n) => n > 0 && patchFlag & n).map((n) => PatchFlagNames[n]).join(`, `);
              vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;
            }
          } else {
            vnodePatchFlag = String(patchFlag);
          }
          if (dynamicPropNames && dynamicPropNames.length) {
            vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
          }
        }
        node.codegenNode = createVNodeCall(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false, isComponent2, node.loc);
      };
    };
    true ? Object.freeze({}) : {};
    true ? Object.freeze([]) : [];
    cacheStringFunction = (fn) => {
      const cache = /* @__PURE__ */ Object.create(null);
      return (str) => {
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
      };
    };
    camelizeRE = /-(\w)/g;
    camelize2 = cacheStringFunction((str) => {
      return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
    });
    transformSlotOutlet = (node, context) => {
      if (isSlotOutlet(node)) {
        const { children, loc } = node;
        const { slotName, slotProps } = processSlotOutlet(node, context);
        const slotArgs = [
          context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
          slotName,
          "{}",
          "undefined",
          "true"
        ];
        let expectedLen = 2;
        if (slotProps) {
          slotArgs[2] = slotProps;
          expectedLen = 3;
        }
        if (children.length) {
          slotArgs[3] = createFunctionExpression([], children, false, false, loc);
          expectedLen = 4;
        }
        if (context.scopeId && !context.slotted) {
          expectedLen = 5;
        }
        slotArgs.splice(expectedLen);
        node.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);
      }
    };
    fnExpRE = /^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
    transformOn = (dir, node, context, augmentor) => {
      const { loc, modifiers, arg } = dir;
      if (!dir.exp && !modifiers.length) {
        context.onError(createCompilerError(35, loc));
      }
      let eventName;
      if (arg.type === 4) {
        if (arg.isStatic) {
          let rawName = arg.content;
          if (rawName.startsWith("vue:")) {
            rawName = `vnode-${rawName.slice(4)}`;
          }
          eventName = createSimpleExpression(toHandlerKey(camelize(rawName)), true, arg.loc);
        } else {
          eventName = createCompoundExpression([
            `${context.helperString(TO_HANDLER_KEY)}(`,
            arg,
            `)`
          ]);
        }
      } else {
        eventName = arg;
        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
        eventName.children.push(`)`);
      }
      let exp = dir.exp;
      if (exp && !exp.content.trim()) {
        exp = void 0;
      }
      let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
      if (exp) {
        const isMemberExp = isMemberExpression(exp.content);
        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));
        const hasMultipleStatements = exp.content.includes(`;`);
        if (true) {
          validateBrowserExpression(exp, context, false, hasMultipleStatements);
        }
        if (isInlineStatement || shouldCache && isMemberExp) {
          exp = createCompoundExpression([
            `${isInlineStatement ? `$event` : `${``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
            exp,
            hasMultipleStatements ? `}` : `)`
          ]);
        }
      }
      let ret = {
        props: [
          createObjectProperty(eventName, exp || createSimpleExpression(`() => {}`, false, loc))
        ]
      };
      if (augmentor) {
        ret = augmentor(ret);
      }
      if (shouldCache) {
        ret.props[0].value = context.cache(ret.props[0].value);
      }
      ret.props.forEach((p) => p.key.isHandlerKey = true);
      return ret;
    };
    transformBind = (dir, _node, context) => {
      const { exp, modifiers, loc } = dir;
      const arg = dir.arg;
      if (arg.type !== 4) {
        arg.children.unshift(`(`);
        arg.children.push(`) || ""`);
      } else if (!arg.isStatic) {
        arg.content = `${arg.content} || ""`;
      }
      if (modifiers.includes("camel")) {
        if (arg.type === 4) {
          if (arg.isStatic) {
            arg.content = camelize(arg.content);
          } else {
            arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
          }
        } else {
          arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
          arg.children.push(`)`);
        }
      }
      if (!context.inSSR) {
        if (modifiers.includes("prop")) {
          injectPrefix(arg, ".");
        }
        if (modifiers.includes("attr")) {
          injectPrefix(arg, "^");
        }
      }
      if (!exp || exp.type === 4 && !exp.content.trim()) {
        context.onError(createCompilerError(34, loc));
        return {
          props: [createObjectProperty(arg, createSimpleExpression("", true, loc))]
        };
      }
      return {
        props: [createObjectProperty(arg, exp)]
      };
    };
    injectPrefix = (arg, prefix) => {
      if (arg.type === 4) {
        if (arg.isStatic) {
          arg.content = prefix + arg.content;
        } else {
          arg.content = `\`${prefix}\${${arg.content}}\``;
        }
      } else {
        arg.children.unshift(`'${prefix}' + (`);
        arg.children.push(`)`);
      }
    };
    transformText = (node, context) => {
      if (node.type === 0 || node.type === 1 || node.type === 11 || node.type === 10) {
        return () => {
          const children = node.children;
          let currentContainer = void 0;
          let hasText = false;
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText(child)) {
              hasText = true;
              for (let j = i + 1; j < children.length; j++) {
                const next = children[j];
                if (isText(next)) {
                  if (!currentContainer) {
                    currentContainer = children[i] = createCompoundExpression([child], child.loc);
                  }
                  currentContainer.children.push(` + `, next);
                  children.splice(j, 1);
                  j--;
                } else {
                  currentContainer = void 0;
                  break;
                }
              }
            }
          }
          if (!hasText || children.length === 1 && (node.type === 0 || node.type === 1 && node.tagType === 0 && !node.props.find((p) => p.type === 7 && !context.directiveTransforms[p.name]) && !(node.tag === "template"))) {
            return;
          }
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText(child) || child.type === 8) {
              const callArgs = [];
              if (child.type !== 2 || child.content !== " ") {
                callArgs.push(child);
              }
              if (!context.ssr && getConstantType(child, context) === 0) {
                callArgs.push(1 + (true ? ` /* ${PatchFlagNames[1]} */` : ``));
              }
              children[i] = {
                type: 12,
                content: child,
                loc: child.loc,
                codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)
              };
            }
          }
        };
      }
    };
    seen = /* @__PURE__ */ new WeakSet();
    transformOnce = (node, context) => {
      if (node.type === 1 && findDir(node, "once", true)) {
        if (seen.has(node) || context.inVOnce) {
          return;
        }
        seen.add(node);
        context.inVOnce = true;
        context.helper(SET_BLOCK_TRACKING);
        return () => {
          context.inVOnce = false;
          const cur = context.currentNode;
          if (cur.codegenNode) {
            cur.codegenNode = context.cache(cur.codegenNode, true);
          }
        };
      }
    };
    transformModel = (dir, node, context) => {
      const { exp, arg } = dir;
      if (!exp) {
        context.onError(createCompilerError(41, dir.loc));
        return createTransformProps();
      }
      const rawExp = exp.loc.source;
      const expString = exp.type === 4 ? exp.content : rawExp;
      context.bindingMetadata[rawExp];
      const maybeRef = false;
      if (!expString.trim() || !isMemberExpression(expString) && !maybeRef) {
        context.onError(createCompilerError(42, exp.loc));
        return createTransformProps();
      }
      const propName = arg ? arg : createSimpleExpression("modelValue", true);
      const eventName = arg ? isStaticExp(arg) ? `onUpdate:${arg.content}` : createCompoundExpression(['"onUpdate:" + ', arg]) : `onUpdate:modelValue`;
      let assignmentExp;
      const eventArg = context.isTS ? `($event: any)` : `$event`;
      {
        assignmentExp = createCompoundExpression([
          `${eventArg} => ((`,
          exp,
          `) = $event)`
        ]);
      }
      const props = [
        createObjectProperty(propName, dir.exp),
        createObjectProperty(eventName, assignmentExp)
      ];
      if (dir.modifiers.length && node.tagType === 1) {
        const modifiers = dir.modifiers.map((m) => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);
        const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, ' + "Modifiers"']) : `modelModifiers`;
        props.push(createObjectProperty(modifiersKey, createSimpleExpression(`{ ${modifiers} }`, false, dir.loc, 2)));
      }
      return createTransformProps(props);
    };
    validDivisionCharRE = /[\w).+\-_$\]]/;
    transformFilter = (node, context) => {
      if (!isCompatEnabled("COMPILER_FILTER", context)) {
        return;
      }
      if (node.type === 5) {
        rewriteFilter(node.content, context);
      }
      if (node.type === 1) {
        node.props.forEach((prop) => {
          if (prop.type === 7 && prop.name !== "for" && prop.exp) {
            rewriteFilter(prop.exp, context);
          }
        });
      }
    };
    seen$1 = /* @__PURE__ */ new WeakSet();
    transformMemo = (node, context) => {
      if (node.type === 1) {
        const dir = findDir(node, "memo");
        if (!dir || seen$1.has(node)) {
          return;
        }
        seen$1.add(node);
        return () => {
          const codegenNode = node.codegenNode || context.currentNode.codegenNode;
          if (codegenNode && codegenNode.type === 13) {
            if (node.tagType !== 1) {
              makeBlock(codegenNode, context);
            }
            node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [
              dir.exp,
              createFunctionExpression(void 0, codegenNode),
              `_cache`,
              String(context.cached++)
            ]);
          }
        };
      }
    };
    noopDirectiveTransform = () => ({ props: [] });
  }
});

// node_modules/@vue/compiler-dom/dist/compiler-dom.esm-bundler.js
var compiler_dom_esm_bundler_exports = {};
__export(compiler_dom_esm_bundler_exports, {
  BASE_TRANSITION: () => BASE_TRANSITION,
  CAMELIZE: () => CAMELIZE,
  CAPITALIZE: () => CAPITALIZE,
  CREATE_BLOCK: () => CREATE_BLOCK,
  CREATE_COMMENT: () => CREATE_COMMENT,
  CREATE_ELEMENT_BLOCK: () => CREATE_ELEMENT_BLOCK,
  CREATE_ELEMENT_VNODE: () => CREATE_ELEMENT_VNODE,
  CREATE_SLOTS: () => CREATE_SLOTS,
  CREATE_STATIC: () => CREATE_STATIC,
  CREATE_TEXT: () => CREATE_TEXT,
  CREATE_VNODE: () => CREATE_VNODE,
  DOMDirectiveTransforms: () => DOMDirectiveTransforms,
  DOMNodeTransforms: () => DOMNodeTransforms,
  FRAGMENT: () => FRAGMENT,
  GUARD_REACTIVE_PROPS: () => GUARD_REACTIVE_PROPS,
  IS_MEMO_SAME: () => IS_MEMO_SAME,
  IS_REF: () => IS_REF,
  KEEP_ALIVE: () => KEEP_ALIVE,
  MERGE_PROPS: () => MERGE_PROPS,
  NORMALIZE_CLASS: () => NORMALIZE_CLASS,
  NORMALIZE_PROPS: () => NORMALIZE_PROPS,
  NORMALIZE_STYLE: () => NORMALIZE_STYLE,
  OPEN_BLOCK: () => OPEN_BLOCK,
  POP_SCOPE_ID: () => POP_SCOPE_ID,
  PUSH_SCOPE_ID: () => PUSH_SCOPE_ID,
  RENDER_LIST: () => RENDER_LIST,
  RENDER_SLOT: () => RENDER_SLOT,
  RESOLVE_COMPONENT: () => RESOLVE_COMPONENT,
  RESOLVE_DIRECTIVE: () => RESOLVE_DIRECTIVE,
  RESOLVE_DYNAMIC_COMPONENT: () => RESOLVE_DYNAMIC_COMPONENT,
  RESOLVE_FILTER: () => RESOLVE_FILTER,
  SET_BLOCK_TRACKING: () => SET_BLOCK_TRACKING,
  SUSPENSE: () => SUSPENSE,
  TELEPORT: () => TELEPORT,
  TO_DISPLAY_STRING: () => TO_DISPLAY_STRING,
  TO_HANDLERS: () => TO_HANDLERS,
  TO_HANDLER_KEY: () => TO_HANDLER_KEY,
  TRANSITION: () => TRANSITION,
  TRANSITION_GROUP: () => TRANSITION_GROUP,
  UNREF: () => UNREF,
  V_MODEL_CHECKBOX: () => V_MODEL_CHECKBOX,
  V_MODEL_DYNAMIC: () => V_MODEL_DYNAMIC,
  V_MODEL_RADIO: () => V_MODEL_RADIO,
  V_MODEL_SELECT: () => V_MODEL_SELECT,
  V_MODEL_TEXT: () => V_MODEL_TEXT,
  V_ON_WITH_KEYS: () => V_ON_WITH_KEYS,
  V_ON_WITH_MODIFIERS: () => V_ON_WITH_MODIFIERS,
  V_SHOW: () => V_SHOW,
  WITH_CTX: () => WITH_CTX,
  WITH_DIRECTIVES: () => WITH_DIRECTIVES,
  WITH_MEMO: () => WITH_MEMO,
  advancePositionWithClone: () => advancePositionWithClone,
  advancePositionWithMutation: () => advancePositionWithMutation,
  assert: () => assert,
  baseCompile: () => baseCompile,
  baseParse: () => baseParse,
  buildDirectiveArgs: () => buildDirectiveArgs,
  buildProps: () => buildProps,
  buildSlots: () => buildSlots,
  checkCompatEnabled: () => checkCompatEnabled,
  compile: () => compile,
  createArrayExpression: () => createArrayExpression,
  createAssignmentExpression: () => createAssignmentExpression,
  createBlockStatement: () => createBlockStatement,
  createCacheExpression: () => createCacheExpression,
  createCallExpression: () => createCallExpression,
  createCompilerError: () => createCompilerError,
  createCompoundExpression: () => createCompoundExpression,
  createConditionalExpression: () => createConditionalExpression,
  createDOMCompilerError: () => createDOMCompilerError,
  createForLoopParams: () => createForLoopParams,
  createFunctionExpression: () => createFunctionExpression,
  createIfStatement: () => createIfStatement,
  createInterpolation: () => createInterpolation,
  createObjectExpression: () => createObjectExpression,
  createObjectProperty: () => createObjectProperty,
  createReturnStatement: () => createReturnStatement,
  createRoot: () => createRoot,
  createSequenceExpression: () => createSequenceExpression,
  createSimpleExpression: () => createSimpleExpression,
  createStructuralDirectiveTransform: () => createStructuralDirectiveTransform,
  createTemplateLiteral: () => createTemplateLiteral,
  createTransformContext: () => createTransformContext,
  createVNodeCall: () => createVNodeCall,
  extractIdentifiers: () => extractIdentifiers,
  findDir: () => findDir,
  findProp: () => findProp,
  generate: () => generate,
  generateCodeFrame: () => generateCodeFrame,
  getBaseTransformPreset: () => getBaseTransformPreset,
  getConstantType: () => getConstantType,
  getInnerRange: () => getInnerRange,
  getMemoedVNodeCall: () => getMemoedVNodeCall,
  getVNodeBlockHelper: () => getVNodeBlockHelper,
  getVNodeHelper: () => getVNodeHelper,
  hasDynamicKeyVBind: () => hasDynamicKeyVBind,
  hasScopeRef: () => hasScopeRef,
  helperNameMap: () => helperNameMap,
  injectProp: () => injectProp,
  isBuiltInType: () => isBuiltInType,
  isCoreComponent: () => isCoreComponent,
  isFunctionType: () => isFunctionType,
  isInDestructureAssignment: () => isInDestructureAssignment,
  isMemberExpression: () => isMemberExpression,
  isMemberExpressionBrowser: () => isMemberExpressionBrowser,
  isMemberExpressionNode: () => isMemberExpressionNode,
  isReferencedIdentifier: () => isReferencedIdentifier,
  isSimpleIdentifier: () => isSimpleIdentifier,
  isSlotOutlet: () => isSlotOutlet,
  isStaticArgOf: () => isStaticArgOf,
  isStaticExp: () => isStaticExp,
  isStaticProperty: () => isStaticProperty,
  isStaticPropertyKey: () => isStaticPropertyKey,
  isTemplateNode: () => isTemplateNode,
  isText: () => isText,
  isVSlot: () => isVSlot,
  locStub: () => locStub,
  makeBlock: () => makeBlock,
  noopDirectiveTransform: () => noopDirectiveTransform,
  parse: () => parse,
  parserOptions: () => parserOptions,
  processExpression: () => processExpression,
  processFor: () => processFor,
  processIf: () => processIf,
  processSlotOutlet: () => processSlotOutlet,
  registerRuntimeHelpers: () => registerRuntimeHelpers,
  resolveComponentType: () => resolveComponentType,
  toValidAssetId: () => toValidAssetId,
  trackSlotScopes: () => trackSlotScopes,
  trackVForSlotScopes: () => trackVForSlotScopes,
  transform: () => transform,
  transformBind: () => transformBind,
  transformElement: () => transformElement,
  transformExpression: () => transformExpression,
  transformModel: () => transformModel,
  transformOn: () => transformOn,
  transformStyle: () => transformStyle,
  traverseNode: () => traverseNode,
  walkBlockDeclarations: () => walkBlockDeclarations,
  walkFunctionParams: () => walkFunctionParams,
  walkIdentifiers: () => walkIdentifiers,
  warnDeprecation: () => warnDeprecation
});
function decodeHtmlBrowser(raw, asAttr = false) {
  if (!decoder) {
    decoder = document.createElement("div");
  }
  if (asAttr) {
    decoder.innerHTML = `<div foo="${raw.replace(/"/g, "&quot;")}">`;
    return decoder.children[0].getAttribute("foo");
  } else {
    decoder.innerHTML = raw;
    return decoder.textContent;
  }
}
function createDOMCompilerError(code, loc) {
  return createCompilerError(code, loc, true ? DOMErrorMessages : void 0);
}
function hasMultipleChildren(node) {
  const children = node.children = node.children.filter((c) => c.type !== 3 && !(c.type === 2 && !c.content.trim()));
  const child = children[0];
  return children.length !== 1 || child.type === 11 || child.type === 9 && child.branches.some(hasMultipleChildren);
}
function compile(template, options = {}) {
  return baseCompile(template, extend({}, parserOptions, options, {
    nodeTransforms: [
      ignoreSideEffectTags,
      ...DOMNodeTransforms,
      ...options.nodeTransforms || []
    ],
    directiveTransforms: extend({}, DOMDirectiveTransforms, options.directiveTransforms || {}),
    transformHoist: null
  }));
}
function parse(template, options = {}) {
  return baseParse(template, extend({}, parserOptions, options));
}
var V_MODEL_RADIO, V_MODEL_CHECKBOX, V_MODEL_TEXT, V_MODEL_SELECT, V_MODEL_DYNAMIC, V_ON_WITH_MODIFIERS, V_ON_WITH_KEYS, V_SHOW, TRANSITION, TRANSITION_GROUP, decoder, isRawTextContainer, parserOptions, transformStyle, parseInlineCSS, DOMErrorMessages, transformVHtml, transformVText, transformModel2, isEventOptionModifier, isNonKeyModifier, maybeKeyModifier, isKeyboardEvent, resolveModifiers, transformClick, transformOn2, transformShow, transformTransition, ignoreSideEffectTags, DOMNodeTransforms, DOMDirectiveTransforms;
var init_compiler_dom_esm_bundler = __esm({
  "node_modules/@vue/compiler-dom/dist/compiler-dom.esm-bundler.js"() {
    init_compiler_core_esm_bundler();
    init_compiler_core_esm_bundler();
    init_shared_esm_bundler();
    V_MODEL_RADIO = Symbol(true ? `vModelRadio` : ``);
    V_MODEL_CHECKBOX = Symbol(true ? `vModelCheckbox` : ``);
    V_MODEL_TEXT = Symbol(true ? `vModelText` : ``);
    V_MODEL_SELECT = Symbol(true ? `vModelSelect` : ``);
    V_MODEL_DYNAMIC = Symbol(true ? `vModelDynamic` : ``);
    V_ON_WITH_MODIFIERS = Symbol(true ? `vOnModifiersGuard` : ``);
    V_ON_WITH_KEYS = Symbol(true ? `vOnKeysGuard` : ``);
    V_SHOW = Symbol(true ? `vShow` : ``);
    TRANSITION = Symbol(true ? `Transition` : ``);
    TRANSITION_GROUP = Symbol(true ? `TransitionGroup` : ``);
    registerRuntimeHelpers({
      [V_MODEL_RADIO]: `vModelRadio`,
      [V_MODEL_CHECKBOX]: `vModelCheckbox`,
      [V_MODEL_TEXT]: `vModelText`,
      [V_MODEL_SELECT]: `vModelSelect`,
      [V_MODEL_DYNAMIC]: `vModelDynamic`,
      [V_ON_WITH_MODIFIERS]: `withModifiers`,
      [V_ON_WITH_KEYS]: `withKeys`,
      [V_SHOW]: `vShow`,
      [TRANSITION]: `Transition`,
      [TRANSITION_GROUP]: `TransitionGroup`
    });
    isRawTextContainer = makeMap("style,iframe,script,noscript", true);
    parserOptions = {
      isVoidTag,
      isNativeTag: (tag) => isHTMLTag(tag) || isSVGTag(tag),
      isPreTag: (tag) => tag === "pre",
      decodeEntities: decodeHtmlBrowser,
      isBuiltInComponent: (tag) => {
        if (isBuiltInType(tag, `Transition`)) {
          return TRANSITION;
        } else if (isBuiltInType(tag, `TransitionGroup`)) {
          return TRANSITION_GROUP;
        }
      },
      getNamespace(tag, parent) {
        let ns = parent ? parent.ns : 0;
        if (parent && ns === 2) {
          if (parent.tag === "annotation-xml") {
            if (tag === "svg") {
              return 1;
            }
            if (parent.props.some((a) => a.type === 6 && a.name === "encoding" && a.value != null && (a.value.content === "text/html" || a.value.content === "application/xhtml+xml"))) {
              ns = 0;
            }
          } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag !== "mglyph" && tag !== "malignmark") {
            ns = 0;
          }
        } else if (parent && ns === 1) {
          if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") {
            ns = 0;
          }
        }
        if (ns === 0) {
          if (tag === "svg") {
            return 1;
          }
          if (tag === "math") {
            return 2;
          }
        }
        return ns;
      },
      getTextMode({ tag, ns }) {
        if (ns === 0) {
          if (tag === "textarea" || tag === "title") {
            return 1;
          }
          if (isRawTextContainer(tag)) {
            return 2;
          }
        }
        return 0;
      }
    };
    transformStyle = (node) => {
      if (node.type === 1) {
        node.props.forEach((p, i) => {
          if (p.type === 6 && p.name === "style" && p.value) {
            node.props[i] = {
              type: 7,
              name: `bind`,
              arg: createSimpleExpression(`style`, true, p.loc),
              exp: parseInlineCSS(p.value.content, p.loc),
              modifiers: [],
              loc: p.loc
            };
          }
        });
      }
    };
    parseInlineCSS = (cssText, loc) => {
      const normalized = parseStringStyle(cssText);
      return createSimpleExpression(JSON.stringify(normalized), false, loc, 3);
    };
    DOMErrorMessages = {
      [50]: `v-html is missing expression.`,
      [51]: `v-html will override element children.`,
      [52]: `v-text is missing expression.`,
      [53]: `v-text will override element children.`,
      [54]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
      [55]: `v-model argument is not supported on plain elements.`,
      [56]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
      [57]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
      [58]: `v-show is missing expression.`,
      [59]: `<Transition> expects exactly one child element or component.`,
      [60]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
    };
    transformVHtml = (dir, node, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError(50, loc));
      }
      if (node.children.length) {
        context.onError(createDOMCompilerError(51, loc));
        node.children.length = 0;
      }
      return {
        props: [
          createObjectProperty(createSimpleExpression(`innerHTML`, true, loc), exp || createSimpleExpression("", true))
        ]
      };
    };
    transformVText = (dir, node, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError(52, loc));
      }
      if (node.children.length) {
        context.onError(createDOMCompilerError(53, loc));
        node.children.length = 0;
      }
      return {
        props: [
          createObjectProperty(createSimpleExpression(`textContent`, true), exp ? getConstantType(exp, context) > 0 ? exp : createCallExpression(context.helperString(TO_DISPLAY_STRING), [exp], loc) : createSimpleExpression("", true))
        ]
      };
    };
    transformModel2 = (dir, node, context) => {
      const baseResult = transformModel(dir, node, context);
      if (!baseResult.props.length || node.tagType === 1) {
        return baseResult;
      }
      if (dir.arg) {
        context.onError(createDOMCompilerError(55, dir.arg.loc));
      }
      function checkDuplicatedValue() {
        const value = findProp(node, "value");
        if (value) {
          context.onError(createDOMCompilerError(57, value.loc));
        }
      }
      const { tag } = node;
      const isCustomElement = context.isCustomElement(tag);
      if (tag === "input" || tag === "textarea" || tag === "select" || isCustomElement) {
        let directiveToUse = V_MODEL_TEXT;
        let isInvalidType = false;
        if (tag === "input" || isCustomElement) {
          const type = findProp(node, `type`);
          if (type) {
            if (type.type === 7) {
              directiveToUse = V_MODEL_DYNAMIC;
            } else if (type.value) {
              switch (type.value.content) {
                case "radio":
                  directiveToUse = V_MODEL_RADIO;
                  break;
                case "checkbox":
                  directiveToUse = V_MODEL_CHECKBOX;
                  break;
                case "file":
                  isInvalidType = true;
                  context.onError(createDOMCompilerError(56, dir.loc));
                  break;
                default:
                  checkDuplicatedValue();
                  break;
              }
            }
          } else if (hasDynamicKeyVBind(node)) {
            directiveToUse = V_MODEL_DYNAMIC;
          } else {
            checkDuplicatedValue();
          }
        } else if (tag === "select") {
          directiveToUse = V_MODEL_SELECT;
        } else {
          checkDuplicatedValue();
        }
        if (!isInvalidType) {
          baseResult.needRuntime = context.helper(directiveToUse);
        }
      } else {
        context.onError(createDOMCompilerError(54, dir.loc));
      }
      baseResult.props = baseResult.props.filter((p) => !(p.key.type === 4 && p.key.content === "modelValue"));
      return baseResult;
    };
    isEventOptionModifier = makeMap(`passive,once,capture`);
    isNonKeyModifier = makeMap(
      `stop,prevent,self,ctrl,shift,alt,meta,exact,middle`
    );
    maybeKeyModifier = makeMap("left,right");
    isKeyboardEvent = makeMap(`onkeyup,onkeydown,onkeypress`, true);
    resolveModifiers = (key, modifiers, context, loc) => {
      const keyModifiers = [];
      const nonKeyModifiers = [];
      const eventOptionModifiers = [];
      for (let i = 0; i < modifiers.length; i++) {
        const modifier = modifiers[i];
        if (modifier === "native" && checkCompatEnabled("COMPILER_V_ON_NATIVE", context, loc)) {
          eventOptionModifiers.push(modifier);
        } else if (isEventOptionModifier(modifier)) {
          eventOptionModifiers.push(modifier);
        } else {
          if (maybeKeyModifier(modifier)) {
            if (isStaticExp(key)) {
              if (isKeyboardEvent(key.content)) {
                keyModifiers.push(modifier);
              } else {
                nonKeyModifiers.push(modifier);
              }
            } else {
              keyModifiers.push(modifier);
              nonKeyModifiers.push(modifier);
            }
          } else {
            if (isNonKeyModifier(modifier)) {
              nonKeyModifiers.push(modifier);
            } else {
              keyModifiers.push(modifier);
            }
          }
        }
      }
      return {
        keyModifiers,
        nonKeyModifiers,
        eventOptionModifiers
      };
    };
    transformClick = (key, event) => {
      const isStaticClick = isStaticExp(key) && key.content.toLowerCase() === "onclick";
      return isStaticClick ? createSimpleExpression(event, true) : key.type !== 4 ? createCompoundExpression([
        `(`,
        key,
        `) === "onClick" ? "${event}" : (`,
        key,
        `)`
      ]) : key;
    };
    transformOn2 = (dir, node, context) => {
      return transformOn(dir, node, context, (baseResult) => {
        const { modifiers } = dir;
        if (!modifiers.length)
          return baseResult;
        let { key, value: handlerExp } = baseResult.props[0];
        const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);
        if (nonKeyModifiers.includes("right")) {
          key = transformClick(key, `onContextmenu`);
        }
        if (nonKeyModifiers.includes("middle")) {
          key = transformClick(key, `onMouseup`);
        }
        if (nonKeyModifiers.length) {
          handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [
            handlerExp,
            JSON.stringify(nonKeyModifiers)
          ]);
        }
        if (keyModifiers.length && (!isStaticExp(key) || isKeyboardEvent(key.content))) {
          handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [
            handlerExp,
            JSON.stringify(keyModifiers)
          ]);
        }
        if (eventOptionModifiers.length) {
          const modifierPostfix = eventOptionModifiers.map(capitalize).join("");
          key = isStaticExp(key) ? createSimpleExpression(`${key.content}${modifierPostfix}`, true) : createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);
        }
        return {
          props: [createObjectProperty(key, handlerExp)]
        };
      });
    };
    transformShow = (dir, node, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError(58, loc));
      }
      return {
        props: [],
        needRuntime: context.helper(V_SHOW)
      };
    };
    transformTransition = (node, context) => {
      if (node.type === 1 && node.tagType === 1) {
        const component = context.isBuiltInComponent(node.tag);
        if (component === TRANSITION) {
          return () => {
            if (!node.children.length) {
              return;
            }
            if (hasMultipleChildren(node)) {
              context.onError(createDOMCompilerError(59, {
                start: node.children[0].loc.start,
                end: node.children[node.children.length - 1].loc.end,
                source: ""
              }));
            }
            const child = node.children[0];
            if (child.type === 1) {
              for (const p of child.props) {
                if (p.type === 7 && p.name === "show") {
                  node.props.push({
                    type: 6,
                    name: "persisted",
                    value: void 0,
                    loc: node.loc
                  });
                }
              }
            }
          };
        }
      }
    };
    ignoreSideEffectTags = (node, context) => {
      if (node.type === 1 && node.tagType === 0 && (node.tag === "script" || node.tag === "style")) {
        context.onError(createDOMCompilerError(60, node.loc));
        context.removeNode();
      }
    };
    DOMNodeTransforms = [
      transformStyle,
      ...true ? [transformTransition] : []
    ];
    DOMDirectiveTransforms = {
      cloak: noopDirectiveTransform,
      html: transformVHtml,
      text: transformVText,
      model: transformModel2,
      on: transformOn2,
      show: transformShow
    };
  }
});

// node_modules/vue/dist/vue.cjs.js
var require_vue_cjs = __commonJS({
  "node_modules/vue/dist/vue.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var compilerDom = (init_compiler_dom_esm_bundler(), __toCommonJS(compiler_dom_esm_bundler_exports));
    var runtimeDom = (init_runtime_dom_esm_bundler(), __toCommonJS(runtime_dom_esm_bundler_exports));
    var shared = (init_shared_esm_bundler(), __toCommonJS(shared_esm_bundler_exports));
    function _interopNamespace(e) {
      if (e && e.__esModule)
        return e;
      var n = /* @__PURE__ */ Object.create(null);
      if (e) {
        Object.keys(e).forEach(function(k) {
          n[k] = e[k];
        });
      }
      n["default"] = e;
      return Object.freeze(n);
    }
    var runtimeDom__namespace = _interopNamespace(runtimeDom);
    var compileCache = /* @__PURE__ */ Object.create(null);
    function compileToFunction(template, options) {
      if (!shared.isString(template)) {
        if (template.nodeType) {
          template = template.innerHTML;
        } else {
          runtimeDom.warn(`invalid template option: `, template);
          return shared.NOOP;
        }
      }
      const key = template;
      const cached = compileCache[key];
      if (cached) {
        return cached;
      }
      if (template[0] === "#") {
        const el = document.querySelector(template);
        if (!el) {
          runtimeDom.warn(`Template element not found or is empty: ${template}`);
        }
        template = el ? el.innerHTML : ``;
      }
      const { code } = compilerDom.compile(template, shared.extend({
        hoistStatic: true,
        onError,
        onWarn: (e) => onError(e, true)
      }, options));
      function onError(err, asWarning = false) {
        const message = asWarning ? err.message : `Template compilation error: ${err.message}`;
        const codeFrame = err.loc && shared.generateCodeFrame(template, err.loc.start.offset, err.loc.end.offset);
        runtimeDom.warn(codeFrame ? `${message}
${codeFrame}` : message);
      }
      const render = new Function("Vue", code)(runtimeDom__namespace);
      render._rc = true;
      return compileCache[key] = render;
    }
    runtimeDom.registerRuntimeCompiler(compileToFunction);
    Object.keys(runtimeDom).forEach(function(k) {
      if (k !== "default")
        exports[k] = runtimeDom[k];
    });
    exports.compile = compileToFunction;
  }
});

// node_modules/vue/index.js
var require_vue = __commonJS({
  "node_modules/vue/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_vue_cjs();
    }
  }
});

// node_modules/vue3-draggable/dist/vue3-draggable.umd.min.js
var require_vue3_draggable_umd_min = __commonJS({
  "node_modules/vue3-draggable/dist/vue3-draggable.umd.min.js"(exports, module) {
    (function(t, e) {
      "object" === typeof exports && "object" === typeof module ? module.exports = e(require_vue()) : "function" === typeof define && define.amd ? define([], e) : "object" === typeof exports ? exports["vue3-draggable"] = e(require_vue()) : t["vue3-draggable"] = e(t["Vue"]);
    })("undefined" !== typeof self ? self : exports, function(t) {
      return function(t2) {
        var e = {};
        function n(r) {
          if (e[r])
            return e[r].exports;
          var o = e[r] = { i: r, l: false, exports: {} };
          return t2[r].call(o.exports, o, o.exports, n), o.l = true, o.exports;
        }
        return n.m = t2, n.c = e, n.d = function(t3, e2, r) {
          n.o(t3, e2) || Object.defineProperty(t3, e2, { enumerable: true, get: r });
        }, n.r = function(t3) {
          "undefined" !== typeof Symbol && Symbol.toStringTag && Object.defineProperty(t3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t3, "__esModule", { value: true });
        }, n.t = function(t3, e2) {
          if (1 & e2 && (t3 = n(t3)), 8 & e2)
            return t3;
          if (4 & e2 && "object" === typeof t3 && t3 && t3.__esModule)
            return t3;
          var r = /* @__PURE__ */ Object.create(null);
          if (n.r(r), Object.defineProperty(r, "default", { enumerable: true, value: t3 }), 2 & e2 && "string" != typeof t3)
            for (var o in t3)
              n.d(r, o, function(e3) {
                return t3[e3];
              }.bind(null, o));
          return r;
        }, n.n = function(t3) {
          var e2 = t3 && t3.__esModule ? function() {
            return t3["default"];
          } : function() {
            return t3;
          };
          return n.d(e2, "a", e2), e2;
        }, n.o = function(t3, e2) {
          return Object.prototype.hasOwnProperty.call(t3, e2);
        }, n.p = "", n(n.s = "fb15");
      }({ "00ee": function(t2, e, n) {
        var r = n("b622"), o = r("toStringTag"), i = {};
        i[o] = "z", t2.exports = "[object z]" === String(i);
      }, "0366": function(t2, e, n) {
        var r = n("1c0b");
        t2.exports = function(t3, e2, n2) {
          if (r(t3), void 0 === e2)
            return t3;
          switch (n2) {
            case 0:
              return function() {
                return t3.call(e2);
              };
            case 1:
              return function(n3) {
                return t3.call(e2, n3);
              };
            case 2:
              return function(n3, r2) {
                return t3.call(e2, n3, r2);
              };
            case 3:
              return function(n3, r2, o) {
                return t3.call(e2, n3, r2, o);
              };
          }
          return function() {
            return t3.apply(e2, arguments);
          };
        };
      }, "057f": function(t2, e, n) {
        var r = n("fc6a"), o = n("241c").f, i = {}.toString, c = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [], a = function(t3) {
          try {
            return o(t3);
          } catch (e2) {
            return c.slice();
          }
        };
        t2.exports.f = function(t3) {
          return c && "[object Window]" == i.call(t3) ? a(t3) : o(r(t3));
        };
      }, "06cf": function(t2, e, n) {
        var r = n("83ab"), o = n("d1e7"), i = n("5c6c"), c = n("fc6a"), a = n("c04e"), u = n("5135"), f = n("0cfb"), s = Object.getOwnPropertyDescriptor;
        e.f = r ? s : function(t3, e2) {
          if (t3 = c(t3), e2 = a(e2, true), f)
            try {
              return s(t3, e2);
            } catch (n2) {
            }
          if (u(t3, e2))
            return i(!o.f.call(t3, e2), t3[e2]);
        };
      }, "0cfb": function(t2, e, n) {
        var r = n("83ab"), o = n("d039"), i = n("cc12");
        t2.exports = !r && !o(function() {
          return 7 != Object.defineProperty(i("div"), "a", { get: function() {
            return 7;
          } }).a;
        });
      }, "159b": function(t2, e, n) {
        var r = n("da84"), o = n("fdbc"), i = n("17c2"), c = n("9112");
        for (var a in o) {
          var u = r[a], f = u && u.prototype;
          if (f && f.forEach !== i)
            try {
              c(f, "forEach", i);
            } catch (s) {
              f.forEach = i;
            }
        }
      }, "17c2": function(t2, e, n) {
        "use strict";
        var r = n("b727").forEach, o = n("a640"), i = n("ae40"), c = o("forEach"), a = i("forEach");
        t2.exports = c && a ? [].forEach : function(t3) {
          return r(this, t3, arguments.length > 1 ? arguments[1] : void 0);
        };
      }, "19aa": function(t2, e) {
        t2.exports = function(t3, e2, n) {
          if (!(t3 instanceof e2))
            throw TypeError("Incorrect " + (n ? n + " " : "") + "invocation");
          return t3;
        };
      }, "1be4": function(t2, e, n) {
        var r = n("d066");
        t2.exports = r("document", "documentElement");
      }, "1c0b": function(t2, e) {
        t2.exports = function(t3) {
          if ("function" != typeof t3)
            throw TypeError(String(t3) + " is not a function");
          return t3;
        };
      }, "1c7e": function(t2, e, n) {
        var r = n("b622"), o = r("iterator"), i = false;
        try {
          var c = 0, a = { next: function() {
            return { done: !!c++ };
          }, return: function() {
            i = true;
          } };
          a[o] = function() {
            return this;
          }, Array.from(a, function() {
            throw 2;
          });
        } catch (u) {
        }
        t2.exports = function(t3, e2) {
          if (!e2 && !i)
            return false;
          var n2 = false;
          try {
            var r2 = {};
            r2[o] = function() {
              return { next: function() {
                return { done: n2 = true };
              } };
            }, t3(r2);
          } catch (u) {
          }
          return n2;
        };
      }, "1cdc": function(t2, e, n) {
        var r = n("342f");
        t2.exports = /(iphone|ipod|ipad).*applewebkit/i.test(r);
      }, "1d80": function(t2, e) {
        t2.exports = function(t3) {
          if (void 0 == t3)
            throw TypeError("Can't call method on " + t3);
          return t3;
        };
      }, "1dde": function(t2, e, n) {
        var r = n("d039"), o = n("b622"), i = n("2d00"), c = o("species");
        t2.exports = function(t3) {
          return i >= 51 || !r(function() {
            var e2 = [], n2 = e2.constructor = {};
            return n2[c] = function() {
              return { foo: 1 };
            }, 1 !== e2[t3](Boolean).foo;
          });
        };
      }, 2266: function(t2, e, n) {
        var r = n("825a"), o = n("e95a"), i = n("50c4"), c = n("0366"), a = n("35a1"), u = n("2a62"), f = function(t3, e2) {
          this.stopped = t3, this.result = e2;
        };
        t2.exports = function(t3, e2, n2) {
          var s, l, p, d, v, h, b, g = n2 && n2.that, y = !(!n2 || !n2.AS_ENTRIES), m = !(!n2 || !n2.IS_ITERATOR), w = !(!n2 || !n2.INTERRUPTED), O = c(e2, g, 1 + y + w), x = function(t4) {
            return s && u(s), new f(true, t4);
          }, j = function(t4) {
            return y ? (r(t4), w ? O(t4[0], t4[1], x) : O(t4[0], t4[1])) : w ? O(t4, x) : O(t4);
          };
          if (m)
            s = t3;
          else {
            if (l = a(t3), "function" != typeof l)
              throw TypeError("Target is not iterable");
            if (o(l)) {
              for (p = 0, d = i(t3.length); d > p; p++)
                if (v = j(t3[p]), v && v instanceof f)
                  return v;
              return new f(false);
            }
            s = l.call(t3);
          }
          h = s.next;
          while (!(b = h.call(s)).done) {
            try {
              v = j(b.value);
            } catch (S) {
              throw u(s), S;
            }
            if ("object" == typeof v && v && v instanceof f)
              return v;
          }
          return new f(false);
        };
      }, "23cb": function(t2, e, n) {
        var r = n("a691"), o = Math.max, i = Math.min;
        t2.exports = function(t3, e2) {
          var n2 = r(t3);
          return n2 < 0 ? o(n2 + e2, 0) : i(n2, e2);
        };
      }, "23e7": function(t2, e, n) {
        var r = n("da84"), o = n("06cf").f, i = n("9112"), c = n("6eeb"), a = n("ce4e"), u = n("e893"), f = n("94ca");
        t2.exports = function(t3, e2) {
          var n2, s, l, p, d, v, h = t3.target, b = t3.global, g = t3.stat;
          if (s = b ? r : g ? r[h] || a(h, {}) : (r[h] || {}).prototype, s)
            for (l in e2) {
              if (d = e2[l], t3.noTargetGet ? (v = o(s, l), p = v && v.value) : p = s[l], n2 = f(b ? l : h + (g ? "." : "#") + l, t3.forced), !n2 && void 0 !== p) {
                if (typeof d === typeof p)
                  continue;
                u(d, p);
              }
              (t3.sham || p && p.sham) && i(d, "sham", true), c(s, l, d, t3);
            }
        };
      }, "241c": function(t2, e, n) {
        var r = n("ca84"), o = n("7839"), i = o.concat("length", "prototype");
        e.f = Object.getOwnPropertyNames || function(t3) {
          return r(t3, i);
        };
      }, "24fb": function(t2, e, n) {
        "use strict";
        function r(t3, e2) {
          var n2 = t3[1] || "", r2 = t3[3];
          if (!r2)
            return n2;
          if (e2 && "function" === typeof btoa) {
            var i = o(r2), c = r2.sources.map(function(t4) {
              return "/*# sourceURL=".concat(r2.sourceRoot || "").concat(t4, " */");
            });
            return [n2].concat(c).concat([i]).join("\n");
          }
          return [n2].join("\n");
        }
        function o(t3) {
          var e2 = btoa(unescape(encodeURIComponent(JSON.stringify(t3)))), n2 = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e2);
          return "/*# ".concat(n2, " */");
        }
        t2.exports = function(t3) {
          var e2 = [];
          return e2.toString = function() {
            return this.map(function(e3) {
              var n2 = r(e3, t3);
              return e3[2] ? "@media ".concat(e3[2], " {").concat(n2, "}") : n2;
            }).join("");
          }, e2.i = function(t4, n2, r2) {
            "string" === typeof t4 && (t4 = [[null, t4, ""]]);
            var o2 = {};
            if (r2)
              for (var i = 0; i < this.length; i++) {
                var c = this[i][0];
                null != c && (o2[c] = true);
              }
            for (var a = 0; a < t4.length; a++) {
              var u = [].concat(t4[a]);
              r2 && o2[u[0]] || (n2 && (u[2] ? u[2] = "".concat(n2, " and ").concat(u[2]) : u[2] = n2), e2.push(u));
            }
          }, e2;
        };
      }, 2626: function(t2, e, n) {
        "use strict";
        var r = n("d066"), o = n("9bf2"), i = n("b622"), c = n("83ab"), a = i("species");
        t2.exports = function(t3) {
          var e2 = r(t3), n2 = o.f;
          c && e2 && !e2[a] && n2(e2, a, { configurable: true, get: function() {
            return this;
          } });
        };
      }, "2a62": function(t2, e, n) {
        var r = n("825a");
        t2.exports = function(t3) {
          var e2 = t3["return"];
          if (void 0 !== e2)
            return r(e2.call(t3)).value;
        };
      }, "2cf4": function(t2, e, n) {
        var r, o, i, c = n("da84"), a = n("d039"), u = n("0366"), f = n("1be4"), s = n("cc12"), l = n("1cdc"), p = n("605d"), d = c.location, v = c.setImmediate, h = c.clearImmediate, b = c.process, g = c.MessageChannel, y = c.Dispatch, m = 0, w = {}, O = "onreadystatechange", x = function(t3) {
          if (w.hasOwnProperty(t3)) {
            var e2 = w[t3];
            delete w[t3], e2();
          }
        }, j = function(t3) {
          return function() {
            x(t3);
          };
        }, S = function(t3) {
          x(t3.data);
        }, E = function(t3) {
          c.postMessage(t3 + "", d.protocol + "//" + d.host);
        };
        v && h || (v = function(t3) {
          var e2 = [], n2 = 1;
          while (arguments.length > n2)
            e2.push(arguments[n2++]);
          return w[++m] = function() {
            ("function" == typeof t3 ? t3 : Function(t3)).apply(void 0, e2);
          }, r(m), m;
        }, h = function(t3) {
          delete w[t3];
        }, p ? r = function(t3) {
          b.nextTick(j(t3));
        } : y && y.now ? r = function(t3) {
          y.now(j(t3));
        } : g && !l ? (o = new g(), i = o.port2, o.port1.onmessage = S, r = u(i.postMessage, i, 1)) : c.addEventListener && "function" == typeof postMessage && !c.importScripts && d && "file:" !== d.protocol && !a(E) ? (r = E, c.addEventListener("message", S, false)) : r = O in s("script") ? function(t3) {
          f.appendChild(s("script"))[O] = function() {
            f.removeChild(this), x(t3);
          };
        } : function(t3) {
          setTimeout(j(t3), 0);
        }), t2.exports = { set: v, clear: h };
      }, "2d00": function(t2, e, n) {
        var r, o, i = n("da84"), c = n("342f"), a = i.process, u = a && a.versions, f = u && u.v8;
        f ? (r = f.split("."), o = r[0] + r[1]) : c && (r = c.match(/Edge\/(\d+)/), (!r || r[1] >= 74) && (r = c.match(/Chrome\/(\d+)/), r && (o = r[1]))), t2.exports = o && +o;
      }, "342f": function(t2, e, n) {
        var r = n("d066");
        t2.exports = r("navigator", "userAgent") || "";
      }, "35a1": function(t2, e, n) {
        var r = n("f5df"), o = n("3f8c"), i = n("b622"), c = i("iterator");
        t2.exports = function(t3) {
          if (void 0 != t3)
            return t3[c] || t3["@@iterator"] || o[r(t3)];
        };
      }, "37e8": function(t2, e, n) {
        var r = n("83ab"), o = n("9bf2"), i = n("825a"), c = n("df75");
        t2.exports = r ? Object.defineProperties : function(t3, e2) {
          i(t3);
          var n2, r2 = c(e2), a = r2.length, u = 0;
          while (a > u)
            o.f(t3, n2 = r2[u++], e2[n2]);
          return t3;
        };
      }, "3bbe": function(t2, e, n) {
        var r = n("861d");
        t2.exports = function(t3) {
          if (!r(t3) && null !== t3)
            throw TypeError("Can't set " + String(t3) + " as a prototype");
          return t3;
        };
      }, "3f8c": function(t2, e) {
        t2.exports = {};
      }, 4160: function(t2, e, n) {
        "use strict";
        var r = n("23e7"), o = n("17c2");
        r({ target: "Array", proto: true, forced: [].forEach != o }, { forEach: o });
      }, "428f": function(t2, e, n) {
        var r = n("da84");
        t2.exports = r;
      }, "44ad": function(t2, e, n) {
        var r = n("d039"), o = n("c6b6"), i = "".split;
        t2.exports = r(function() {
          return !Object("z").propertyIsEnumerable(0);
        }) ? function(t3) {
          return "String" == o(t3) ? i.call(t3, "") : Object(t3);
        } : Object;
      }, "44de": function(t2, e, n) {
        var r = n("da84");
        t2.exports = function(t3, e2) {
          var n2 = r.console;
          n2 && n2.error && (1 === arguments.length ? n2.error(t3) : n2.error(t3, e2));
        };
      }, 4840: function(t2, e, n) {
        var r = n("825a"), o = n("1c0b"), i = n("b622"), c = i("species");
        t2.exports = function(t3, e2) {
          var n2, i2 = r(t3).constructor;
          return void 0 === i2 || void 0 == (n2 = r(i2)[c]) ? e2 : o(n2);
        };
      }, 4930: function(t2, e, n) {
        var r = n("d039");
        t2.exports = !!Object.getOwnPropertySymbols && !r(function() {
          return !String(Symbol());
        });
      }, "499e": function(t2, e, n) {
        "use strict";
        function r(t3, e2) {
          for (var n2 = [], r2 = {}, o2 = 0; o2 < e2.length; o2++) {
            var i2 = e2[o2], c2 = i2[0], a2 = i2[1], u2 = i2[2], f2 = i2[3], s2 = { id: t3 + ":" + o2, css: a2, media: u2, sourceMap: f2 };
            r2[c2] ? r2[c2].parts.push(s2) : n2.push(r2[c2] = { id: c2, parts: [s2] });
          }
          return n2;
        }
        n.r(e), n.d(e, "default", function() {
          return v;
        });
        var o = "undefined" !== typeof document;
        if ("undefined" !== typeof DEBUG && DEBUG && !o)
          throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");
        var i = {}, c = o && (document.head || document.getElementsByTagName("head")[0]), a = null, u = 0, f = false, s = function() {
        }, l = null, p = "data-vue-ssr-id", d = "undefined" !== typeof navigator && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase());
        function v(t3, e2, n2, o2) {
          f = n2, l = o2 || {};
          var c2 = r(t3, e2);
          return h(c2), function(e3) {
            for (var n3 = [], o3 = 0; o3 < c2.length; o3++) {
              var a2 = c2[o3], u2 = i[a2.id];
              u2.refs--, n3.push(u2);
            }
            e3 ? (c2 = r(t3, e3), h(c2)) : c2 = [];
            for (o3 = 0; o3 < n3.length; o3++) {
              u2 = n3[o3];
              if (0 === u2.refs) {
                for (var f2 = 0; f2 < u2.parts.length; f2++)
                  u2.parts[f2]();
                delete i[u2.id];
              }
            }
          };
        }
        function h(t3) {
          for (var e2 = 0; e2 < t3.length; e2++) {
            var n2 = t3[e2], r2 = i[n2.id];
            if (r2) {
              r2.refs++;
              for (var o2 = 0; o2 < r2.parts.length; o2++)
                r2.parts[o2](n2.parts[o2]);
              for (; o2 < n2.parts.length; o2++)
                r2.parts.push(g(n2.parts[o2]));
              r2.parts.length > n2.parts.length && (r2.parts.length = n2.parts.length);
            } else {
              var c2 = [];
              for (o2 = 0; o2 < n2.parts.length; o2++)
                c2.push(g(n2.parts[o2]));
              i[n2.id] = { id: n2.id, refs: 1, parts: c2 };
            }
          }
        }
        function b() {
          var t3 = document.createElement("style");
          return t3.type = "text/css", c.appendChild(t3), t3;
        }
        function g(t3) {
          var e2, n2, r2 = document.querySelector("style[" + p + '~="' + t3.id + '"]');
          if (r2) {
            if (f)
              return s;
            r2.parentNode.removeChild(r2);
          }
          if (d) {
            var o2 = u++;
            r2 = a || (a = b()), e2 = m.bind(null, r2, o2, false), n2 = m.bind(null, r2, o2, true);
          } else
            r2 = b(), e2 = w.bind(null, r2), n2 = function() {
              r2.parentNode.removeChild(r2);
            };
          return e2(t3), function(r3) {
            if (r3) {
              if (r3.css === t3.css && r3.media === t3.media && r3.sourceMap === t3.sourceMap)
                return;
              e2(t3 = r3);
            } else
              n2();
          };
        }
        var y = function() {
          var t3 = [];
          return function(e2, n2) {
            return t3[e2] = n2, t3.filter(Boolean).join("\n");
          };
        }();
        function m(t3, e2, n2, r2) {
          var o2 = n2 ? "" : r2.css;
          if (t3.styleSheet)
            t3.styleSheet.cssText = y(e2, o2);
          else {
            var i2 = document.createTextNode(o2), c2 = t3.childNodes;
            c2[e2] && t3.removeChild(c2[e2]), c2.length ? t3.insertBefore(i2, c2[e2]) : t3.appendChild(i2);
          }
        }
        function w(t3, e2) {
          var n2 = e2.css, r2 = e2.media, o2 = e2.sourceMap;
          if (r2 && t3.setAttribute("media", r2), l.ssrId && t3.setAttribute(p, e2.id), o2 && (n2 += "\n/*# sourceURL=" + o2.sources[0] + " */", n2 += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(o2)))) + " */"), t3.styleSheet)
            t3.styleSheet.cssText = n2;
          else {
            while (t3.firstChild)
              t3.removeChild(t3.firstChild);
            t3.appendChild(document.createTextNode(n2));
          }
        }
      }, "4d64": function(t2, e, n) {
        var r = n("fc6a"), o = n("50c4"), i = n("23cb"), c = function(t3) {
          return function(e2, n2, c2) {
            var a, u = r(e2), f = o(u.length), s = i(c2, f);
            if (t3 && n2 != n2) {
              while (f > s)
                if (a = u[s++], a != a)
                  return true;
            } else
              for (; f > s; s++)
                if ((t3 || s in u) && u[s] === n2)
                  return t3 || s || 0;
            return !t3 && -1;
          };
        };
        t2.exports = { includes: c(true), indexOf: c(false) };
      }, "4de4": function(t2, e, n) {
        "use strict";
        var r = n("23e7"), o = n("b727").filter, i = n("1dde"), c = n("ae40"), a = i("filter"), u = c("filter");
        r({ target: "Array", proto: true, forced: !a || !u }, { filter: function(t3) {
          return o(this, t3, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, "50c4": function(t2, e, n) {
        var r = n("a691"), o = Math.min;
        t2.exports = function(t3) {
          return t3 > 0 ? o(r(t3), 9007199254740991) : 0;
        };
      }, 5135: function(t2, e) {
        var n = {}.hasOwnProperty;
        t2.exports = function(t3, e2) {
          return n.call(t3, e2);
        };
      }, 5692: function(t2, e, n) {
        var r = n("c430"), o = n("c6cd");
        (t2.exports = function(t3, e2) {
          return o[t3] || (o[t3] = void 0 !== e2 ? e2 : {});
        })("versions", []).push({ version: "3.8.1", mode: r ? "pure" : "global", copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)" });
      }, "56ef": function(t2, e, n) {
        var r = n("d066"), o = n("241c"), i = n("7418"), c = n("825a");
        t2.exports = r("Reflect", "ownKeys") || function(t3) {
          var e2 = o.f(c(t3)), n2 = i.f;
          return n2 ? e2.concat(n2(t3)) : e2;
        };
      }, 5899: function(t2, e) {
        t2.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
      }, "58a8": function(t2, e, n) {
        var r = n("1d80"), o = n("5899"), i = "[" + o + "]", c = RegExp("^" + i + i + "*"), a = RegExp(i + i + "*$"), u = function(t3) {
          return function(e2) {
            var n2 = String(r(e2));
            return 1 & t3 && (n2 = n2.replace(c, "")), 2 & t3 && (n2 = n2.replace(a, "")), n2;
          };
        };
        t2.exports = { start: u(1), end: u(2), trim: u(3) };
      }, "5c6c": function(t2, e) {
        t2.exports = function(t3, e2) {
          return { enumerable: !(1 & t3), configurable: !(2 & t3), writable: !(4 & t3), value: e2 };
        };
      }, 6037: function(t2, e, n) {
        "use strict";
        n("d1b9");
      }, "605d": function(t2, e, n) {
        var r = n("c6b6"), o = n("da84");
        t2.exports = "process" == r(o.process);
      }, "65f0": function(t2, e, n) {
        var r = n("861d"), o = n("e8b5"), i = n("b622"), c = i("species");
        t2.exports = function(t3, e2) {
          var n2;
          return o(t3) && (n2 = t3.constructor, "function" != typeof n2 || n2 !== Array && !o(n2.prototype) ? r(n2) && (n2 = n2[c], null === n2 && (n2 = void 0)) : n2 = void 0), new (void 0 === n2 ? Array : n2)(0 === e2 ? 0 : e2);
        };
      }, "69f3": function(t2, e, n) {
        var r, o, i, c = n("7f9a"), a = n("da84"), u = n("861d"), f = n("9112"), s = n("5135"), l = n("c6cd"), p = n("f772"), d = n("d012"), v = a.WeakMap, h = function(t3) {
          return i(t3) ? o(t3) : r(t3, {});
        }, b = function(t3) {
          return function(e2) {
            var n2;
            if (!u(e2) || (n2 = o(e2)).type !== t3)
              throw TypeError("Incompatible receiver, " + t3 + " required");
            return n2;
          };
        };
        if (c) {
          var g = l.state || (l.state = new v()), y = g.get, m = g.has, w = g.set;
          r = function(t3, e2) {
            return e2.facade = t3, w.call(g, t3, e2), e2;
          }, o = function(t3) {
            return y.call(g, t3) || {};
          }, i = function(t3) {
            return m.call(g, t3);
          };
        } else {
          var O = p("state");
          d[O] = true, r = function(t3, e2) {
            return e2.facade = t3, f(t3, O, e2), e2;
          }, o = function(t3) {
            return s(t3, O) ? t3[O] : {};
          }, i = function(t3) {
            return s(t3, O);
          };
        }
        t2.exports = { set: r, get: o, has: i, enforce: h, getterFor: b };
      }, "6eeb": function(t2, e, n) {
        var r = n("da84"), o = n("9112"), i = n("5135"), c = n("ce4e"), a = n("8925"), u = n("69f3"), f = u.get, s = u.enforce, l = String(String).split("String");
        (t2.exports = function(t3, e2, n2, a2) {
          var u2, f2 = !!a2 && !!a2.unsafe, p = !!a2 && !!a2.enumerable, d = !!a2 && !!a2.noTargetGet;
          "function" == typeof n2 && ("string" != typeof e2 || i(n2, "name") || o(n2, "name", e2), u2 = s(n2), u2.source || (u2.source = l.join("string" == typeof e2 ? e2 : ""))), t3 !== r ? (f2 ? !d && t3[e2] && (p = true) : delete t3[e2], p ? t3[e2] = n2 : o(t3, e2, n2)) : p ? t3[e2] = n2 : c(e2, n2);
        })(Function.prototype, "toString", function() {
          return "function" == typeof this && f(this).source || a(this);
        });
      }, 7156: function(t2, e, n) {
        var r = n("861d"), o = n("d2bb");
        t2.exports = function(t3, e2, n2) {
          var i, c;
          return o && "function" == typeof (i = e2.constructor) && i !== n2 && r(c = i.prototype) && c !== n2.prototype && o(t3, c), t3;
        };
      }, 7418: function(t2, e) {
        e.f = Object.getOwnPropertySymbols;
      }, "746f": function(t2, e, n) {
        var r = n("428f"), o = n("5135"), i = n("e538"), c = n("9bf2").f;
        t2.exports = function(t3) {
          var e2 = r.Symbol || (r.Symbol = {});
          o(e2, t3) || c(e2, t3, { value: i.f(t3) });
        };
      }, 7839: function(t2, e) {
        t2.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
      }, "7b0b": function(t2, e, n) {
        var r = n("1d80");
        t2.exports = function(t3) {
          return Object(r(t3));
        };
      }, "7c73": function(t2, e, n) {
        var r, o = n("825a"), i = n("37e8"), c = n("7839"), a = n("d012"), u = n("1be4"), f = n("cc12"), s = n("f772"), l = ">", p = "<", d = "prototype", v = "script", h = s("IE_PROTO"), b = function() {
        }, g = function(t3) {
          return p + v + l + t3 + p + "/" + v + l;
        }, y = function(t3) {
          t3.write(g("")), t3.close();
          var e2 = t3.parentWindow.Object;
          return t3 = null, e2;
        }, m = function() {
          var t3, e2 = f("iframe"), n2 = "java" + v + ":";
          return e2.style.display = "none", u.appendChild(e2), e2.src = String(n2), t3 = e2.contentWindow.document, t3.open(), t3.write(g("document.F=Object")), t3.close(), t3.F;
        }, w = function() {
          try {
            r = document.domain && new ActiveXObject("htmlfile");
          } catch (e2) {
          }
          w = r ? y(r) : m();
          var t3 = c.length;
          while (t3--)
            delete w[d][c[t3]];
          return w();
        };
        a[h] = true, t2.exports = Object.create || function(t3, e2) {
          var n2;
          return null !== t3 ? (b[d] = o(t3), n2 = new b(), b[d] = null, n2[h] = t3) : n2 = w(), void 0 === e2 ? n2 : i(n2, e2);
        };
      }, "7f9a": function(t2, e, n) {
        var r = n("da84"), o = n("8925"), i = r.WeakMap;
        t2.exports = "function" === typeof i && /native code/.test(o(i));
      }, "825a": function(t2, e, n) {
        var r = n("861d");
        t2.exports = function(t3) {
          if (!r(t3))
            throw TypeError(String(t3) + " is not an object");
          return t3;
        };
      }, "83ab": function(t2, e, n) {
        var r = n("d039");
        t2.exports = !r(function() {
          return 7 != Object.defineProperty({}, 1, { get: function() {
            return 7;
          } })[1];
        });
      }, 8418: function(t2, e, n) {
        "use strict";
        var r = n("c04e"), o = n("9bf2"), i = n("5c6c");
        t2.exports = function(t3, e2, n2) {
          var c = r(e2);
          c in t3 ? o.f(t3, c, i(0, n2)) : t3[c] = n2;
        };
      }, "861d": function(t2, e) {
        t2.exports = function(t3) {
          return "object" === typeof t3 ? null !== t3 : "function" === typeof t3;
        };
      }, 8875: function(t2, e, n) {
        var r, o, i;
        (function(n2, c) {
          o = [], r = c, i = "function" === typeof r ? r.apply(e, o) : r, void 0 === i || (t2.exports = i);
        })("undefined" !== typeof self && self, function() {
          function t3() {
            var e2 = Object.getOwnPropertyDescriptor(document, "currentScript");
            if (!e2 && "currentScript" in document && document.currentScript)
              return document.currentScript;
            if (e2 && e2.get !== t3 && document.currentScript)
              return document.currentScript;
            try {
              throw new Error();
            } catch (d) {
              var n2, r2, o2, i2 = /.*at [^(]*\((.*):(.+):(.+)\)$/gi, c = /@([^@]*):(\d+):(\d+)\s*$/gi, a = i2.exec(d.stack) || c.exec(d.stack), u = a && a[1] || false, f = a && a[2] || false, s = document.location.href.replace(document.location.hash, ""), l = document.getElementsByTagName("script");
              u === s && (n2 = document.documentElement.outerHTML, r2 = new RegExp("(?:[^\\n]+?\\n){0," + (f - 2) + "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*", "i"), o2 = n2.replace(r2, "$1").trim());
              for (var p = 0; p < l.length; p++) {
                if ("interactive" === l[p].readyState)
                  return l[p];
                if (l[p].src === u)
                  return l[p];
                if (u === s && l[p].innerHTML && l[p].innerHTML.trim() === o2)
                  return l[p];
              }
              return null;
            }
          }
          return t3;
        });
      }, 8925: function(t2, e, n) {
        var r = n("c6cd"), o = Function.toString;
        "function" != typeof r.inspectSource && (r.inspectSource = function(t3) {
          return o.call(t3);
        }), t2.exports = r.inspectSource;
      }, "8bbf": function(e, n) {
        e.exports = t;
      }, "8f38": function(t2, e, n) {
        var r = n("24fb");
        e = r(false), e.push([t2.i, ".isDragging[data-v-2fc82866]{opacity:.4}", ""]), t2.exports = e;
      }, "90e3": function(t2, e) {
        var n = 0, r = Math.random();
        t2.exports = function(t3) {
          return "Symbol(" + String(void 0 === t3 ? "" : t3) + ")_" + (++n + r).toString(36);
        };
      }, 9112: function(t2, e, n) {
        var r = n("83ab"), o = n("9bf2"), i = n("5c6c");
        t2.exports = r ? function(t3, e2, n2) {
          return o.f(t3, e2, i(1, n2));
        } : function(t3, e2, n2) {
          return t3[e2] = n2, t3;
        };
      }, "94ca": function(t2, e, n) {
        var r = n("d039"), o = /#|\.prototype\./, i = function(t3, e2) {
          var n2 = a[c(t3)];
          return n2 == f || n2 != u && ("function" == typeof e2 ? r(e2) : !!e2);
        }, c = i.normalize = function(t3) {
          return String(t3).replace(o, ".").toLowerCase();
        }, a = i.data = {}, u = i.NATIVE = "N", f = i.POLYFILL = "P";
        t2.exports = i;
      }, "96cf": function(t2, e, n) {
        var r = function(t3) {
          "use strict";
          var e2, n2 = Object.prototype, r2 = n2.hasOwnProperty, o = "function" === typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", c = o.asyncIterator || "@@asyncIterator", a = o.toStringTag || "@@toStringTag";
          function u(t4, e3, n3) {
            return Object.defineProperty(t4, e3, { value: n3, enumerable: true, configurable: true, writable: true }), t4[e3];
          }
          try {
            u({}, "");
          } catch (N) {
            u = function(t4, e3, n3) {
              return t4[e3] = n3;
            };
          }
          function f(t4, e3, n3, r3) {
            var o2 = e3 && e3.prototype instanceof b ? e3 : b, i2 = Object.create(o2.prototype), c2 = new D(r3 || []);
            return i2._invoke = E(t4, n3, c2), i2;
          }
          function s(t4, e3, n3) {
            try {
              return { type: "normal", arg: t4.call(e3, n3) };
            } catch (N) {
              return { type: "throw", arg: N };
            }
          }
          t3.wrap = f;
          var l = "suspendedStart", p = "suspendedYield", d = "executing", v = "completed", h = {};
          function b() {
          }
          function g() {
          }
          function y() {
          }
          var m = {};
          m[i] = function() {
            return this;
          };
          var w = Object.getPrototypeOf, O = w && w(w(I([])));
          O && O !== n2 && r2.call(O, i) && (m = O);
          var x = y.prototype = b.prototype = Object.create(m);
          function j(t4) {
            ["next", "throw", "return"].forEach(function(e3) {
              u(t4, e3, function(t5) {
                return this._invoke(e3, t5);
              });
            });
          }
          function S(t4, e3) {
            function n3(o3, i3, c2, a2) {
              var u2 = s(t4[o3], t4, i3);
              if ("throw" !== u2.type) {
                var f2 = u2.arg, l2 = f2.value;
                return l2 && "object" === typeof l2 && r2.call(l2, "__await") ? e3.resolve(l2.__await).then(function(t5) {
                  n3("next", t5, c2, a2);
                }, function(t5) {
                  n3("throw", t5, c2, a2);
                }) : e3.resolve(l2).then(function(t5) {
                  f2.value = t5, c2(f2);
                }, function(t5) {
                  return n3("throw", t5, c2, a2);
                });
              }
              a2(u2.arg);
            }
            var o2;
            function i2(t5, r3) {
              function i3() {
                return new e3(function(e4, o3) {
                  n3(t5, r3, e4, o3);
                });
              }
              return o2 = o2 ? o2.then(i3, i3) : i3();
            }
            this._invoke = i2;
          }
          function E(t4, e3, n3) {
            var r3 = l;
            return function(o2, i2) {
              if (r3 === d)
                throw new Error("Generator is already running");
              if (r3 === v) {
                if ("throw" === o2)
                  throw i2;
                return M();
              }
              n3.method = o2, n3.arg = i2;
              while (1) {
                var c2 = n3.delegate;
                if (c2) {
                  var a2 = L(c2, n3);
                  if (a2) {
                    if (a2 === h)
                      continue;
                    return a2;
                  }
                }
                if ("next" === n3.method)
                  n3.sent = n3._sent = n3.arg;
                else if ("throw" === n3.method) {
                  if (r3 === l)
                    throw r3 = v, n3.arg;
                  n3.dispatchException(n3.arg);
                } else
                  "return" === n3.method && n3.abrupt("return", n3.arg);
                r3 = d;
                var u2 = s(t4, e3, n3);
                if ("normal" === u2.type) {
                  if (r3 = n3.done ? v : p, u2.arg === h)
                    continue;
                  return { value: u2.arg, done: n3.done };
                }
                "throw" === u2.type && (r3 = v, n3.method = "throw", n3.arg = u2.arg);
              }
            };
          }
          function L(t4, n3) {
            var r3 = t4.iterator[n3.method];
            if (r3 === e2) {
              if (n3.delegate = null, "throw" === n3.method) {
                if (t4.iterator["return"] && (n3.method = "return", n3.arg = e2, L(t4, n3), "throw" === n3.method))
                  return h;
                n3.method = "throw", n3.arg = new TypeError("The iterator does not provide a 'throw' method");
              }
              return h;
            }
            var o2 = s(r3, t4.iterator, n3.arg);
            if ("throw" === o2.type)
              return n3.method = "throw", n3.arg = o2.arg, n3.delegate = null, h;
            var i2 = o2.arg;
            return i2 ? i2.done ? (n3[t4.resultName] = i2.value, n3.next = t4.nextLoc, "return" !== n3.method && (n3.method = "next", n3.arg = e2), n3.delegate = null, h) : i2 : (n3.method = "throw", n3.arg = new TypeError("iterator result is not an object"), n3.delegate = null, h);
          }
          function T(t4) {
            var e3 = { tryLoc: t4[0] };
            1 in t4 && (e3.catchLoc = t4[1]), 2 in t4 && (e3.finallyLoc = t4[2], e3.afterLoc = t4[3]), this.tryEntries.push(e3);
          }
          function P(t4) {
            var e3 = t4.completion || {};
            e3.type = "normal", delete e3.arg, t4.completion = e3;
          }
          function D(t4) {
            this.tryEntries = [{ tryLoc: "root" }], t4.forEach(T, this), this.reset(true);
          }
          function I(t4) {
            if (t4) {
              var n3 = t4[i];
              if (n3)
                return n3.call(t4);
              if ("function" === typeof t4.next)
                return t4;
              if (!isNaN(t4.length)) {
                var o2 = -1, c2 = function n4() {
                  while (++o2 < t4.length)
                    if (r2.call(t4, o2))
                      return n4.value = t4[o2], n4.done = false, n4;
                  return n4.value = e2, n4.done = true, n4;
                };
                return c2.next = c2;
              }
            }
            return { next: M };
          }
          function M() {
            return { value: e2, done: true };
          }
          return g.prototype = x.constructor = y, y.constructor = g, g.displayName = u(y, a, "GeneratorFunction"), t3.isGeneratorFunction = function(t4) {
            var e3 = "function" === typeof t4 && t4.constructor;
            return !!e3 && (e3 === g || "GeneratorFunction" === (e3.displayName || e3.name));
          }, t3.mark = function(t4) {
            return Object.setPrototypeOf ? Object.setPrototypeOf(t4, y) : (t4.__proto__ = y, u(t4, a, "GeneratorFunction")), t4.prototype = Object.create(x), t4;
          }, t3.awrap = function(t4) {
            return { __await: t4 };
          }, j(S.prototype), S.prototype[c] = function() {
            return this;
          }, t3.AsyncIterator = S, t3.async = function(e3, n3, r3, o2, i2) {
            void 0 === i2 && (i2 = Promise);
            var c2 = new S(f(e3, n3, r3, o2), i2);
            return t3.isGeneratorFunction(n3) ? c2 : c2.next().then(function(t4) {
              return t4.done ? t4.value : c2.next();
            });
          }, j(x), u(x, a, "Generator"), x[i] = function() {
            return this;
          }, x.toString = function() {
            return "[object Generator]";
          }, t3.keys = function(t4) {
            var e3 = [];
            for (var n3 in t4)
              e3.push(n3);
            return e3.reverse(), function n4() {
              while (e3.length) {
                var r3 = e3.pop();
                if (r3 in t4)
                  return n4.value = r3, n4.done = false, n4;
              }
              return n4.done = true, n4;
            };
          }, t3.values = I, D.prototype = { constructor: D, reset: function(t4) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = e2, this.done = false, this.delegate = null, this.method = "next", this.arg = e2, this.tryEntries.forEach(P), !t4)
              for (var n3 in this)
                "t" === n3.charAt(0) && r2.call(this, n3) && !isNaN(+n3.slice(1)) && (this[n3] = e2);
          }, stop: function() {
            this.done = true;
            var t4 = this.tryEntries[0], e3 = t4.completion;
            if ("throw" === e3.type)
              throw e3.arg;
            return this.rval;
          }, dispatchException: function(t4) {
            if (this.done)
              throw t4;
            var n3 = this;
            function o2(r3, o3) {
              return a2.type = "throw", a2.arg = t4, n3.next = r3, o3 && (n3.method = "next", n3.arg = e2), !!o3;
            }
            for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
              var c2 = this.tryEntries[i2], a2 = c2.completion;
              if ("root" === c2.tryLoc)
                return o2("end");
              if (c2.tryLoc <= this.prev) {
                var u2 = r2.call(c2, "catchLoc"), f2 = r2.call(c2, "finallyLoc");
                if (u2 && f2) {
                  if (this.prev < c2.catchLoc)
                    return o2(c2.catchLoc, true);
                  if (this.prev < c2.finallyLoc)
                    return o2(c2.finallyLoc);
                } else if (u2) {
                  if (this.prev < c2.catchLoc)
                    return o2(c2.catchLoc, true);
                } else {
                  if (!f2)
                    throw new Error("try statement without catch or finally");
                  if (this.prev < c2.finallyLoc)
                    return o2(c2.finallyLoc);
                }
              }
            }
          }, abrupt: function(t4, e3) {
            for (var n3 = this.tryEntries.length - 1; n3 >= 0; --n3) {
              var o2 = this.tryEntries[n3];
              if (o2.tryLoc <= this.prev && r2.call(o2, "finallyLoc") && this.prev < o2.finallyLoc) {
                var i2 = o2;
                break;
              }
            }
            i2 && ("break" === t4 || "continue" === t4) && i2.tryLoc <= e3 && e3 <= i2.finallyLoc && (i2 = null);
            var c2 = i2 ? i2.completion : {};
            return c2.type = t4, c2.arg = e3, i2 ? (this.method = "next", this.next = i2.finallyLoc, h) : this.complete(c2);
          }, complete: function(t4, e3) {
            if ("throw" === t4.type)
              throw t4.arg;
            return "break" === t4.type || "continue" === t4.type ? this.next = t4.arg : "return" === t4.type ? (this.rval = this.arg = t4.arg, this.method = "return", this.next = "end") : "normal" === t4.type && e3 && (this.next = e3), h;
          }, finish: function(t4) {
            for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
              var n3 = this.tryEntries[e3];
              if (n3.finallyLoc === t4)
                return this.complete(n3.completion, n3.afterLoc), P(n3), h;
            }
          }, catch: function(t4) {
            for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
              var n3 = this.tryEntries[e3];
              if (n3.tryLoc === t4) {
                var r3 = n3.completion;
                if ("throw" === r3.type) {
                  var o2 = r3.arg;
                  P(n3);
                }
                return o2;
              }
            }
            throw new Error("illegal catch attempt");
          }, delegateYield: function(t4, n3, r3) {
            return this.delegate = { iterator: I(t4), resultName: n3, nextLoc: r3 }, "next" === this.method && (this.arg = e2), h;
          } }, t3;
        }(t2.exports);
        try {
          regeneratorRuntime = r;
        } catch (o) {
          Function("r", "regeneratorRuntime = r")(r);
        }
      }, "9bf2": function(t2, e, n) {
        var r = n("83ab"), o = n("0cfb"), i = n("825a"), c = n("c04e"), a = Object.defineProperty;
        e.f = r ? a : function(t3, e2, n2) {
          if (i(t3), e2 = c(e2, true), i(n2), o)
            try {
              return a(t3, e2, n2);
            } catch (r2) {
            }
          if ("get" in n2 || "set" in n2)
            throw TypeError("Accessors not supported");
          return "value" in n2 && (t3[e2] = n2.value), t3;
        };
      }, a434: function(t2, e, n) {
        "use strict";
        var r = n("23e7"), o = n("23cb"), i = n("a691"), c = n("50c4"), a = n("7b0b"), u = n("65f0"), f = n("8418"), s = n("1dde"), l = n("ae40"), p = s("splice"), d = l("splice", { ACCESSORS: true, 0: 0, 1: 2 }), v = Math.max, h = Math.min, b = 9007199254740991, g = "Maximum allowed length exceeded";
        r({ target: "Array", proto: true, forced: !p || !d }, { splice: function(t3, e2) {
          var n2, r2, s2, l2, p2, d2, y = a(this), m = c(y.length), w = o(t3, m), O = arguments.length;
          if (0 === O ? n2 = r2 = 0 : 1 === O ? (n2 = 0, r2 = m - w) : (n2 = O - 2, r2 = h(v(i(e2), 0), m - w)), m + n2 - r2 > b)
            throw TypeError(g);
          for (s2 = u(y, r2), l2 = 0; l2 < r2; l2++)
            p2 = w + l2, p2 in y && f(s2, l2, y[p2]);
          if (s2.length = r2, n2 < r2) {
            for (l2 = w; l2 < m - r2; l2++)
              p2 = l2 + r2, d2 = l2 + n2, p2 in y ? y[d2] = y[p2] : delete y[d2];
            for (l2 = m; l2 > m - r2 + n2; l2--)
              delete y[l2 - 1];
          } else if (n2 > r2)
            for (l2 = m - r2; l2 > w; l2--)
              p2 = l2 + r2 - 1, d2 = l2 + n2 - 1, p2 in y ? y[d2] = y[p2] : delete y[d2];
          for (l2 = 0; l2 < n2; l2++)
            y[l2 + w] = arguments[l2 + 2];
          return y.length = m - r2 + n2, s2;
        } });
      }, a4d3: function(t2, e, n) {
        "use strict";
        var r = n("23e7"), o = n("da84"), i = n("d066"), c = n("c430"), a = n("83ab"), u = n("4930"), f = n("fdbf"), s = n("d039"), l = n("5135"), p = n("e8b5"), d = n("861d"), v = n("825a"), h = n("7b0b"), b = n("fc6a"), g = n("c04e"), y = n("5c6c"), m = n("7c73"), w = n("df75"), O = n("241c"), x = n("057f"), j = n("7418"), S = n("06cf"), E = n("9bf2"), L = n("d1e7"), T = n("9112"), P = n("6eeb"), D = n("5692"), I = n("f772"), M = n("d012"), N = n("90e3"), _ = n("b622"), A = n("e538"), k = n("746f"), C = n("d44e"), R = n("69f3"), F = n("b727").forEach, G = I("hidden"), B = "Symbol", V = "prototype", U = _("toPrimitive"), H = R.set, W = R.getterFor(B), $ = Object[V], q = o.Symbol, Y = i("JSON", "stringify"), z = S.f, J = E.f, X = x.f, K = L.f, Q = D("symbols"), Z = D("op-symbols"), tt = D("string-to-symbol-registry"), et = D("symbol-to-string-registry"), nt = D("wks"), rt = o.QObject, ot = !rt || !rt[V] || !rt[V].findChild, it = a && s(function() {
          return 7 != m(J({}, "a", { get: function() {
            return J(this, "a", { value: 7 }).a;
          } })).a;
        }) ? function(t3, e2, n2) {
          var r2 = z($, e2);
          r2 && delete $[e2], J(t3, e2, n2), r2 && t3 !== $ && J($, e2, r2);
        } : J, ct = function(t3, e2) {
          var n2 = Q[t3] = m(q[V]);
          return H(n2, { type: B, tag: t3, description: e2 }), a || (n2.description = e2), n2;
        }, at = f ? function(t3) {
          return "symbol" == typeof t3;
        } : function(t3) {
          return Object(t3) instanceof q;
        }, ut = function(t3, e2, n2) {
          t3 === $ && ut(Z, e2, n2), v(t3);
          var r2 = g(e2, true);
          return v(n2), l(Q, r2) ? (n2.enumerable ? (l(t3, G) && t3[G][r2] && (t3[G][r2] = false), n2 = m(n2, { enumerable: y(0, false) })) : (l(t3, G) || J(t3, G, y(1, {})), t3[G][r2] = true), it(t3, r2, n2)) : J(t3, r2, n2);
        }, ft = function(t3, e2) {
          v(t3);
          var n2 = b(e2), r2 = w(n2).concat(vt(n2));
          return F(r2, function(e3) {
            a && !lt.call(n2, e3) || ut(t3, e3, n2[e3]);
          }), t3;
        }, st = function(t3, e2) {
          return void 0 === e2 ? m(t3) : ft(m(t3), e2);
        }, lt = function(t3) {
          var e2 = g(t3, true), n2 = K.call(this, e2);
          return !(this === $ && l(Q, e2) && !l(Z, e2)) && (!(n2 || !l(this, e2) || !l(Q, e2) || l(this, G) && this[G][e2]) || n2);
        }, pt = function(t3, e2) {
          var n2 = b(t3), r2 = g(e2, true);
          if (n2 !== $ || !l(Q, r2) || l(Z, r2)) {
            var o2 = z(n2, r2);
            return !o2 || !l(Q, r2) || l(n2, G) && n2[G][r2] || (o2.enumerable = true), o2;
          }
        }, dt = function(t3) {
          var e2 = X(b(t3)), n2 = [];
          return F(e2, function(t4) {
            l(Q, t4) || l(M, t4) || n2.push(t4);
          }), n2;
        }, vt = function(t3) {
          var e2 = t3 === $, n2 = X(e2 ? Z : b(t3)), r2 = [];
          return F(n2, function(t4) {
            !l(Q, t4) || e2 && !l($, t4) || r2.push(Q[t4]);
          }), r2;
        };
        if (u || (q = function() {
          if (this instanceof q)
            throw TypeError("Symbol is not a constructor");
          var t3 = arguments.length && void 0 !== arguments[0] ? String(arguments[0]) : void 0, e2 = N(t3), n2 = function(t4) {
            this === $ && n2.call(Z, t4), l(this, G) && l(this[G], e2) && (this[G][e2] = false), it(this, e2, y(1, t4));
          };
          return a && ot && it($, e2, { configurable: true, set: n2 }), ct(e2, t3);
        }, P(q[V], "toString", function() {
          return W(this).tag;
        }), P(q, "withoutSetter", function(t3) {
          return ct(N(t3), t3);
        }), L.f = lt, E.f = ut, S.f = pt, O.f = x.f = dt, j.f = vt, A.f = function(t3) {
          return ct(_(t3), t3);
        }, a && (J(q[V], "description", { configurable: true, get: function() {
          return W(this).description;
        } }), c || P($, "propertyIsEnumerable", lt, { unsafe: true }))), r({ global: true, wrap: true, forced: !u, sham: !u }, { Symbol: q }), F(w(nt), function(t3) {
          k(t3);
        }), r({ target: B, stat: true, forced: !u }, { for: function(t3) {
          var e2 = String(t3);
          if (l(tt, e2))
            return tt[e2];
          var n2 = q(e2);
          return tt[e2] = n2, et[n2] = e2, n2;
        }, keyFor: function(t3) {
          if (!at(t3))
            throw TypeError(t3 + " is not a symbol");
          if (l(et, t3))
            return et[t3];
        }, useSetter: function() {
          ot = true;
        }, useSimple: function() {
          ot = false;
        } }), r({ target: "Object", stat: true, forced: !u, sham: !a }, { create: st, defineProperty: ut, defineProperties: ft, getOwnPropertyDescriptor: pt }), r({ target: "Object", stat: true, forced: !u }, { getOwnPropertyNames: dt, getOwnPropertySymbols: vt }), r({ target: "Object", stat: true, forced: s(function() {
          j.f(1);
        }) }, { getOwnPropertySymbols: function(t3) {
          return j.f(h(t3));
        } }), Y) {
          var ht = !u || s(function() {
            var t3 = q();
            return "[null]" != Y([t3]) || "{}" != Y({ a: t3 }) || "{}" != Y(Object(t3));
          });
          r({ target: "JSON", stat: true, forced: ht }, { stringify: function(t3, e2, n2) {
            var r2, o2 = [t3], i2 = 1;
            while (arguments.length > i2)
              o2.push(arguments[i2++]);
            if (r2 = e2, (d(e2) || void 0 !== t3) && !at(t3))
              return p(e2) || (e2 = function(t4, e3) {
                if ("function" == typeof r2 && (e3 = r2.call(this, t4, e3)), !at(e3))
                  return e3;
              }), o2[1] = e2, Y.apply(null, o2);
          } });
        }
        q[V][U] || T(q[V], U, q[V].valueOf), C(q, B), M[G] = true;
      }, a640: function(t2, e, n) {
        "use strict";
        var r = n("d039");
        t2.exports = function(t3, e2) {
          var n2 = [][t3];
          return !!n2 && r(function() {
            n2.call(null, e2 || function() {
              throw 1;
            }, 1);
          });
        };
      }, a691: function(t2, e) {
        var n = Math.ceil, r = Math.floor;
        t2.exports = function(t3) {
          return isNaN(t3 = +t3) ? 0 : (t3 > 0 ? r : n)(t3);
        };
      }, a9e3: function(t2, e, n) {
        "use strict";
        var r = n("83ab"), o = n("da84"), i = n("94ca"), c = n("6eeb"), a = n("5135"), u = n("c6b6"), f = n("7156"), s = n("c04e"), l = n("d039"), p = n("7c73"), d = n("241c").f, v = n("06cf").f, h = n("9bf2").f, b = n("58a8").trim, g = "Number", y = o[g], m = y.prototype, w = u(p(m)) == g, O = function(t3) {
          var e2, n2, r2, o2, i2, c2, a2, u2, f2 = s(t3, false);
          if ("string" == typeof f2 && f2.length > 2) {
            if (f2 = b(f2), e2 = f2.charCodeAt(0), 43 === e2 || 45 === e2) {
              if (n2 = f2.charCodeAt(2), 88 === n2 || 120 === n2)
                return NaN;
            } else if (48 === e2) {
              switch (f2.charCodeAt(1)) {
                case 66:
                case 98:
                  r2 = 2, o2 = 49;
                  break;
                case 79:
                case 111:
                  r2 = 8, o2 = 55;
                  break;
                default:
                  return +f2;
              }
              for (i2 = f2.slice(2), c2 = i2.length, a2 = 0; a2 < c2; a2++)
                if (u2 = i2.charCodeAt(a2), u2 < 48 || u2 > o2)
                  return NaN;
              return parseInt(i2, r2);
            }
          }
          return +f2;
        };
        if (i(g, !y(" 0o1") || !y("0b1") || y("+0x1"))) {
          for (var x, j = function(t3) {
            var e2 = arguments.length < 1 ? 0 : t3, n2 = this;
            return n2 instanceof j && (w ? l(function() {
              m.valueOf.call(n2);
            }) : u(n2) != g) ? f(new y(O(e2)), n2, j) : O(e2);
          }, S = r ? d(y) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","), E = 0; S.length > E; E++)
            a(y, x = S[E]) && !a(j, x) && h(j, x, v(y, x));
          j.prototype = m, m.constructor = j, c(o, g, j);
        }
      }, ae40: function(t2, e, n) {
        var r = n("83ab"), o = n("d039"), i = n("5135"), c = Object.defineProperty, a = {}, u = function(t3) {
          throw t3;
        };
        t2.exports = function(t3, e2) {
          if (i(a, t3))
            return a[t3];
          e2 || (e2 = {});
          var n2 = [][t3], f = !!i(e2, "ACCESSORS") && e2.ACCESSORS, s = i(e2, 0) ? e2[0] : u, l = i(e2, 1) ? e2[1] : void 0;
          return a[t3] = !!n2 && !o(function() {
            if (f && !r)
              return true;
            var t4 = { length: -1 };
            f ? c(t4, 1, { enumerable: true, get: u }) : t4[1] = 1, n2.call(t4, s, l);
          });
        };
      }, b041: function(t2, e, n) {
        "use strict";
        var r = n("00ee"), o = n("f5df");
        t2.exports = r ? {}.toString : function() {
          return "[object " + o(this) + "]";
        };
      }, b575: function(t2, e, n) {
        var r, o, i, c, a, u, f, s, l = n("da84"), p = n("06cf").f, d = n("2cf4").set, v = n("1cdc"), h = n("605d"), b = l.MutationObserver || l.WebKitMutationObserver, g = l.document, y = l.process, m = l.Promise, w = p(l, "queueMicrotask"), O = w && w.value;
        O || (r = function() {
          var t3, e2;
          h && (t3 = y.domain) && t3.exit();
          while (o) {
            e2 = o.fn, o = o.next;
            try {
              e2();
            } catch (n2) {
              throw o ? c() : i = void 0, n2;
            }
          }
          i = void 0, t3 && t3.enter();
        }, !v && !h && b && g ? (a = true, u = g.createTextNode(""), new b(r).observe(u, { characterData: true }), c = function() {
          u.data = a = !a;
        }) : m && m.resolve ? (f = m.resolve(void 0), s = f.then, c = function() {
          s.call(f, r);
        }) : c = h ? function() {
          y.nextTick(r);
        } : function() {
          d.call(l, r);
        }), t2.exports = O || function(t3) {
          var e2 = { fn: t3, next: void 0 };
          i && (i.next = e2), o || (o = e2, c()), i = e2;
        };
      }, b622: function(t2, e, n) {
        var r = n("da84"), o = n("5692"), i = n("5135"), c = n("90e3"), a = n("4930"), u = n("fdbf"), f = o("wks"), s = r.Symbol, l = u ? s : s && s.withoutSetter || c;
        t2.exports = function(t3) {
          return i(f, t3) || (a && i(s, t3) ? f[t3] = s[t3] : f[t3] = l("Symbol." + t3)), f[t3];
        };
      }, b64b: function(t2, e, n) {
        var r = n("23e7"), o = n("7b0b"), i = n("df75"), c = n("d039"), a = c(function() {
          i(1);
        });
        r({ target: "Object", stat: true, forced: a }, { keys: function(t3) {
          return i(o(t3));
        } });
      }, b727: function(t2, e, n) {
        var r = n("0366"), o = n("44ad"), i = n("7b0b"), c = n("50c4"), a = n("65f0"), u = [].push, f = function(t3) {
          var e2 = 1 == t3, n2 = 2 == t3, f2 = 3 == t3, s = 4 == t3, l = 6 == t3, p = 7 == t3, d = 5 == t3 || l;
          return function(v, h, b, g) {
            for (var y, m, w = i(v), O = o(w), x = r(h, b, 3), j = c(O.length), S = 0, E = g || a, L = e2 ? E(v, j) : n2 || p ? E(v, 0) : void 0; j > S; S++)
              if ((d || S in O) && (y = O[S], m = x(y, S, w), t3))
                if (e2)
                  L[S] = m;
                else if (m)
                  switch (t3) {
                    case 3:
                      return true;
                    case 5:
                      return y;
                    case 6:
                      return S;
                    case 2:
                      u.call(L, y);
                  }
                else
                  switch (t3) {
                    case 4:
                      return false;
                    case 7:
                      u.call(L, y);
                  }
            return l ? -1 : f2 || s ? s : L;
          };
        };
        t2.exports = { forEach: f(0), map: f(1), filter: f(2), some: f(3), every: f(4), find: f(5), findIndex: f(6), filterOut: f(7) };
      }, bdc0: function(t2, e, n) {
        var r = n("24fb");
        e = r(false), e.push([t2.i, ".draggable-item-list-move[data-v-2fb1486c]{transition:var(--5aa46db2)}", ""]), t2.exports = e;
      }, c04e: function(t2, e, n) {
        var r = n("861d");
        t2.exports = function(t3, e2) {
          if (!r(t3))
            return t3;
          var n2, o;
          if (e2 && "function" == typeof (n2 = t3.toString) && !r(o = n2.call(t3)))
            return o;
          if ("function" == typeof (n2 = t3.valueOf) && !r(o = n2.call(t3)))
            return o;
          if (!e2 && "function" == typeof (n2 = t3.toString) && !r(o = n2.call(t3)))
            return o;
          throw TypeError("Can't convert object to primitive value");
        };
      }, c430: function(t2, e) {
        t2.exports = false;
      }, c6b6: function(t2, e) {
        var n = {}.toString;
        t2.exports = function(t3) {
          return n.call(t3).slice(8, -1);
        };
      }, c6cd: function(t2, e, n) {
        var r = n("da84"), o = n("ce4e"), i = "__core-js_shared__", c = r[i] || o(i, {});
        t2.exports = c;
      }, c8ba: function(t2, e) {
        var n;
        n = function() {
          return this;
        }();
        try {
          n = n || new Function("return this")();
        } catch (r) {
          "object" === typeof window && (n = window);
        }
        t2.exports = n;
      }, ca84: function(t2, e, n) {
        var r = n("5135"), o = n("fc6a"), i = n("4d64").indexOf, c = n("d012");
        t2.exports = function(t3, e2) {
          var n2, a = o(t3), u = 0, f = [];
          for (n2 in a)
            !r(c, n2) && r(a, n2) && f.push(n2);
          while (e2.length > u)
            r(a, n2 = e2[u++]) && (~i(f, n2) || f.push(n2));
          return f;
        };
      }, cc12: function(t2, e, n) {
        var r = n("da84"), o = n("861d"), i = r.document, c = o(i) && o(i.createElement);
        t2.exports = function(t3) {
          return c ? i.createElement(t3) : {};
        };
      }, cdf9: function(t2, e, n) {
        var r = n("825a"), o = n("861d"), i = n("f069");
        t2.exports = function(t3, e2) {
          if (r(t3), o(e2) && e2.constructor === t3)
            return e2;
          var n2 = i.f(t3), c = n2.resolve;
          return c(e2), n2.promise;
        };
      }, ce4e: function(t2, e, n) {
        var r = n("da84"), o = n("9112");
        t2.exports = function(t3, e2) {
          try {
            o(r, t3, e2);
          } catch (n2) {
            r[t3] = e2;
          }
          return e2;
        };
      }, d012: function(t2, e) {
        t2.exports = {};
      }, d039: function(t2, e) {
        t2.exports = function(t3) {
          try {
            return !!t3();
          } catch (e2) {
            return true;
          }
        };
      }, d066: function(t2, e, n) {
        var r = n("428f"), o = n("da84"), i = function(t3) {
          return "function" == typeof t3 ? t3 : void 0;
        };
        t2.exports = function(t3, e2) {
          return arguments.length < 2 ? i(r[t3]) || i(o[t3]) : r[t3] && r[t3][e2] || o[t3] && o[t3][e2];
        };
      }, d1b9: function(t2, e, n) {
        var r = n("bdc0");
        "string" === typeof r && (r = [[t2.i, r, ""]]), r.locals && (t2.exports = r.locals);
        var o = n("499e").default;
        o("def185bc", r, true, { sourceMap: false, shadowMode: false });
      }, d1e7: function(t2, e, n) {
        "use strict";
        var r = {}.propertyIsEnumerable, o = Object.getOwnPropertyDescriptor, i = o && !r.call({ 1: 2 }, 1);
        e.f = i ? function(t3) {
          var e2 = o(this, t3);
          return !!e2 && e2.enumerable;
        } : r;
      }, d2bb: function(t2, e, n) {
        var r = n("825a"), o = n("3bbe");
        t2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
          var t3, e2 = false, n2 = {};
          try {
            t3 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set, t3.call(n2, []), e2 = n2 instanceof Array;
          } catch (i) {
          }
          return function(n3, i) {
            return r(n3), o(i), e2 ? t3.call(n3, i) : n3.__proto__ = i, n3;
          };
        }() : void 0);
      }, d3b7: function(t2, e, n) {
        var r = n("00ee"), o = n("6eeb"), i = n("b041");
        r || o(Object.prototype, "toString", i, { unsafe: true });
      }, d44e: function(t2, e, n) {
        var r = n("9bf2").f, o = n("5135"), i = n("b622"), c = i("toStringTag");
        t2.exports = function(t3, e2, n2) {
          t3 && !o(t3 = n2 ? t3 : t3.prototype, c) && r(t3, c, { configurable: true, value: e2 });
        };
      }, d81d: function(t2, e, n) {
        "use strict";
        var r = n("23e7"), o = n("b727").map, i = n("1dde"), c = n("ae40"), a = i("map"), u = c("map");
        r({ target: "Array", proto: true, forced: !a || !u }, { map: function(t3) {
          return o(this, t3, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, d961: function(t2, e, n) {
        var r = n("8f38");
        "string" === typeof r && (r = [[t2.i, r, ""]]), r.locals && (t2.exports = r.locals);
        var o = n("499e").default;
        o("6a2df3bb", r, true, { sourceMap: false, shadowMode: false });
      }, da84: function(t2, e, n) {
        (function(e2) {
          var n2 = function(t3) {
            return t3 && t3.Math == Math && t3;
          };
          t2.exports = n2("object" == typeof globalThis && globalThis) || n2("object" == typeof window && window) || n2("object" == typeof self && self) || n2("object" == typeof e2 && e2) || function() {
            return this;
          }() || Function("return this")();
        }).call(this, n("c8ba"));
      }, dbb4: function(t2, e, n) {
        var r = n("23e7"), o = n("83ab"), i = n("56ef"), c = n("fc6a"), a = n("06cf"), u = n("8418");
        r({ target: "Object", stat: true, sham: !o }, { getOwnPropertyDescriptors: function(t3) {
          var e2, n2, r2 = c(t3), o2 = a.f, f = i(r2), s = {}, l = 0;
          while (f.length > l)
            n2 = o2(r2, e2 = f[l++]), void 0 !== n2 && u(s, e2, n2);
          return s;
        } });
      }, df75: function(t2, e, n) {
        var r = n("ca84"), o = n("7839");
        t2.exports = Object.keys || function(t3) {
          return r(t3, o);
        };
      }, e2cc: function(t2, e, n) {
        var r = n("6eeb");
        t2.exports = function(t3, e2, n2) {
          for (var o in e2)
            r(t3, o, e2[o], n2);
          return t3;
        };
      }, e439: function(t2, e, n) {
        var r = n("23e7"), o = n("d039"), i = n("fc6a"), c = n("06cf").f, a = n("83ab"), u = o(function() {
          c(1);
        }), f = !a || u;
        r({ target: "Object", stat: true, forced: f, sham: !a }, { getOwnPropertyDescriptor: function(t3, e2) {
          return c(i(t3), e2);
        } });
      }, e538: function(t2, e, n) {
        var r = n("b622");
        e.f = r;
      }, e667: function(t2, e) {
        t2.exports = function(t3) {
          try {
            return { error: false, value: t3() };
          } catch (e2) {
            return { error: true, value: e2 };
          }
        };
      }, e6cf: function(t2, e, n) {
        "use strict";
        var r, o, i, c, a = n("23e7"), u = n("c430"), f = n("da84"), s = n("d066"), l = n("fea9"), p = n("6eeb"), d = n("e2cc"), v = n("d44e"), h = n("2626"), b = n("861d"), g = n("1c0b"), y = n("19aa"), m = n("8925"), w = n("2266"), O = n("1c7e"), x = n("4840"), j = n("2cf4").set, S = n("b575"), E = n("cdf9"), L = n("44de"), T = n("f069"), P = n("e667"), D = n("69f3"), I = n("94ca"), M = n("b622"), N = n("605d"), _ = n("2d00"), A = M("species"), k = "Promise", C = D.get, R = D.set, F = D.getterFor(k), G = l, B = f.TypeError, V = f.document, U = f.process, H = s("fetch"), W = T.f, $ = W, q = !!(V && V.createEvent && f.dispatchEvent), Y = "function" == typeof PromiseRejectionEvent, z = "unhandledrejection", J = "rejectionhandled", X = 0, K = 1, Q = 2, Z = 1, tt = 2, et = I(k, function() {
          var t3 = m(G) !== String(G);
          if (!t3) {
            if (66 === _)
              return true;
            if (!N && !Y)
              return true;
          }
          if (u && !G.prototype["finally"])
            return true;
          if (_ >= 51 && /native code/.test(G))
            return false;
          var e2 = G.resolve(1), n2 = function(t4) {
            t4(function() {
            }, function() {
            });
          }, r2 = e2.constructor = {};
          return r2[A] = n2, !(e2.then(function() {
          }) instanceof n2);
        }), nt = et || !O(function(t3) {
          G.all(t3)["catch"](function() {
          });
        }), rt = function(t3) {
          var e2;
          return !(!b(t3) || "function" != typeof (e2 = t3.then)) && e2;
        }, ot = function(t3, e2) {
          if (!t3.notified) {
            t3.notified = true;
            var n2 = t3.reactions;
            S(function() {
              var r2 = t3.value, o2 = t3.state == K, i2 = 0;
              while (n2.length > i2) {
                var c2, a2, u2, f2 = n2[i2++], s2 = o2 ? f2.ok : f2.fail, l2 = f2.resolve, p2 = f2.reject, d2 = f2.domain;
                try {
                  s2 ? (o2 || (t3.rejection === tt && ut(t3), t3.rejection = Z), true === s2 ? c2 = r2 : (d2 && d2.enter(), c2 = s2(r2), d2 && (d2.exit(), u2 = true)), c2 === f2.promise ? p2(B("Promise-chain cycle")) : (a2 = rt(c2)) ? a2.call(c2, l2, p2) : l2(c2)) : p2(r2);
                } catch (v2) {
                  d2 && !u2 && d2.exit(), p2(v2);
                }
              }
              t3.reactions = [], t3.notified = false, e2 && !t3.rejection && ct(t3);
            });
          }
        }, it = function(t3, e2, n2) {
          var r2, o2;
          q ? (r2 = V.createEvent("Event"), r2.promise = e2, r2.reason = n2, r2.initEvent(t3, false, true), f.dispatchEvent(r2)) : r2 = { promise: e2, reason: n2 }, !Y && (o2 = f["on" + t3]) ? o2(r2) : t3 === z && L("Unhandled promise rejection", n2);
        }, ct = function(t3) {
          j.call(f, function() {
            var e2, n2 = t3.facade, r2 = t3.value, o2 = at(t3);
            if (o2 && (e2 = P(function() {
              N ? U.emit("unhandledRejection", r2, n2) : it(z, n2, r2);
            }), t3.rejection = N || at(t3) ? tt : Z, e2.error))
              throw e2.value;
          });
        }, at = function(t3) {
          return t3.rejection !== Z && !t3.parent;
        }, ut = function(t3) {
          j.call(f, function() {
            var e2 = t3.facade;
            N ? U.emit("rejectionHandled", e2) : it(J, e2, t3.value);
          });
        }, ft = function(t3, e2, n2) {
          return function(r2) {
            t3(e2, r2, n2);
          };
        }, st = function(t3, e2, n2) {
          t3.done || (t3.done = true, n2 && (t3 = n2), t3.value = e2, t3.state = Q, ot(t3, true));
        }, lt = function(t3, e2, n2) {
          if (!t3.done) {
            t3.done = true, n2 && (t3 = n2);
            try {
              if (t3.facade === e2)
                throw B("Promise can't be resolved itself");
              var r2 = rt(e2);
              r2 ? S(function() {
                var n3 = { done: false };
                try {
                  r2.call(e2, ft(lt, n3, t3), ft(st, n3, t3));
                } catch (o2) {
                  st(n3, o2, t3);
                }
              }) : (t3.value = e2, t3.state = K, ot(t3, false));
            } catch (o2) {
              st({ done: false }, o2, t3);
            }
          }
        };
        et && (G = function(t3) {
          y(this, G, k), g(t3), r.call(this);
          var e2 = C(this);
          try {
            t3(ft(lt, e2), ft(st, e2));
          } catch (n2) {
            st(e2, n2);
          }
        }, r = function(t3) {
          R(this, { type: k, done: false, notified: false, parent: false, reactions: [], rejection: false, state: X, value: void 0 });
        }, r.prototype = d(G.prototype, { then: function(t3, e2) {
          var n2 = F(this), r2 = W(x(this, G));
          return r2.ok = "function" != typeof t3 || t3, r2.fail = "function" == typeof e2 && e2, r2.domain = N ? U.domain : void 0, n2.parent = true, n2.reactions.push(r2), n2.state != X && ot(n2, false), r2.promise;
        }, catch: function(t3) {
          return this.then(void 0, t3);
        } }), o = function() {
          var t3 = new r(), e2 = C(t3);
          this.promise = t3, this.resolve = ft(lt, e2), this.reject = ft(st, e2);
        }, T.f = W = function(t3) {
          return t3 === G || t3 === i ? new o(t3) : $(t3);
        }, u || "function" != typeof l || (c = l.prototype.then, p(l.prototype, "then", function(t3, e2) {
          var n2 = this;
          return new G(function(t4, e3) {
            c.call(n2, t4, e3);
          }).then(t3, e2);
        }, { unsafe: true }), "function" == typeof H && a({ global: true, enumerable: true, forced: true }, { fetch: function(t3) {
          return E(G, H.apply(f, arguments));
        } }))), a({ global: true, wrap: true, forced: et }, { Promise: G }), v(G, k, false, true), h(k), i = s(k), a({ target: k, stat: true, forced: et }, { reject: function(t3) {
          var e2 = W(this);
          return e2.reject.call(void 0, t3), e2.promise;
        } }), a({ target: k, stat: true, forced: u || et }, { resolve: function(t3) {
          return E(u && this === i ? G : this, t3);
        } }), a({ target: k, stat: true, forced: nt }, { all: function(t3) {
          var e2 = this, n2 = W(e2), r2 = n2.resolve, o2 = n2.reject, i2 = P(function() {
            var n3 = g(e2.resolve), i3 = [], c2 = 0, a2 = 1;
            w(t3, function(t4) {
              var u2 = c2++, f2 = false;
              i3.push(void 0), a2++, n3.call(e2, t4).then(function(t5) {
                f2 || (f2 = true, i3[u2] = t5, --a2 || r2(i3));
              }, o2);
            }), --a2 || r2(i3);
          });
          return i2.error && o2(i2.value), n2.promise;
        }, race: function(t3) {
          var e2 = this, n2 = W(e2), r2 = n2.reject, o2 = P(function() {
            var o3 = g(e2.resolve);
            w(t3, function(t4) {
              o3.call(e2, t4).then(n2.resolve, r2);
            });
          });
          return o2.error && r2(o2.value), n2.promise;
        } });
      }, e893: function(t2, e, n) {
        var r = n("5135"), o = n("56ef"), i = n("06cf"), c = n("9bf2");
        t2.exports = function(t3, e2) {
          for (var n2 = o(e2), a = c.f, u = i.f, f = 0; f < n2.length; f++) {
            var s = n2[f];
            r(t3, s) || a(t3, s, u(e2, s));
          }
        };
      }, e8b5: function(t2, e, n) {
        var r = n("c6b6");
        t2.exports = Array.isArray || function(t3) {
          return "Array" == r(t3);
        };
      }, e95a: function(t2, e, n) {
        var r = n("b622"), o = n("3f8c"), i = r("iterator"), c = Array.prototype;
        t2.exports = function(t3) {
          return void 0 !== t3 && (o.Array === t3 || c[i] === t3);
        };
      }, f069: function(t2, e, n) {
        "use strict";
        var r = n("1c0b"), o = function(t3) {
          var e2, n2;
          this.promise = new t3(function(t4, r2) {
            if (void 0 !== e2 || void 0 !== n2)
              throw TypeError("Bad Promise constructor");
            e2 = t4, n2 = r2;
          }), this.resolve = r(e2), this.reject = r(n2);
        };
        t2.exports.f = function(t3) {
          return new o(t3);
        };
      }, f2f9: function(t2, e, n) {
        "use strict";
        n("d961");
      }, f5df: function(t2, e, n) {
        var r = n("00ee"), o = n("c6b6"), i = n("b622"), c = i("toStringTag"), a = "Arguments" == o(function() {
          return arguments;
        }()), u = function(t3, e2) {
          try {
            return t3[e2];
          } catch (n2) {
          }
        };
        t2.exports = r ? o : function(t3) {
          var e2, n2, r2;
          return void 0 === t3 ? "Undefined" : null === t3 ? "Null" : "string" == typeof (n2 = u(e2 = Object(t3), c)) ? n2 : a ? o(e2) : "Object" == (r2 = o(e2)) && "function" == typeof e2.callee ? "Arguments" : r2;
        };
      }, f772: function(t2, e, n) {
        var r = n("5692"), o = n("90e3"), i = r("keys");
        t2.exports = function(t3) {
          return i[t3] || (i[t3] = o(t3));
        };
      }, fb15: function(t2, e, n) {
        "use strict";
        if (n.r(e), "undefined" !== typeof window) {
          var r = window.document.currentScript, o = n("8875");
          r = o(), "currentScript" in document || Object.defineProperty(document, "currentScript", { get: o });
          var i = r && r.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
          i && (n.p = i[1]);
        }
        var c = n("8bbf"), a = Object(c["withScopeId"])("data-v-2fb1486c"), u = a(function(t3, e2, n2, r2, o2, i2) {
          var u2 = Object(c["resolveComponent"])("draggable-item");
          return Object(c["openBlock"])(), Object(c["createBlock"])("div", { onDragover: e2[2] || (e2[2] = Object(c["withModifiers"])(function() {
            return r2.onDragOver && r2.onDragOver.apply(r2, arguments);
          }, ["prevent", "stop"])) }, [Object(c["createVNode"])(c["TransitionGroup"], { name: "draggable-item-list" }, { default: a(function() {
            return [(Object(c["openBlock"])(true), Object(c["createBlock"])(c["Fragment"], null, Object(c["renderList"])(r2.items, function(n3, o3) {
              return Object(c["openBlock"])(), Object(c["createBlock"])(u2, { key: n3.id, item: n3, containerId: r2.id, position: o3, onItemDragOver: r2.onItemDragOver, onDragenter: e2[1] || (e2[1] = Object(c["withModifiers"])(function() {
              }, ["prevent"])) }, { default: a(function() {
                return [Object(c["renderSlot"])(t3.$slots, "item", { item: n3.data })];
              }), _: 2 }, 1032, ["item", "containerId", "position", "onItemDragOver"]);
            }), 128))];
          }), _: 1 })], 32);
        }), f = Object(c["withScopeId"])("data-v-2fc82866"), s = f(function(t3, e2, n2, r2, o2, i2) {
          return Object(c["openBlock"])(), Object(c["createBlock"])("div", { draggable: "true", onTransitionStart: e2[1] || (e2[1] = function() {
            return r2.transitionStart && r2.transitionStart.apply(r2, arguments);
          }), onTransitionEnd: e2[2] || (e2[2] = function() {
            return r2.transitionEnd && r2.transitionEnd.apply(r2, arguments);
          }), onDragover: e2[3] || (e2[3] = Object(c["withModifiers"])(function() {
            return r2.onDragOver && r2.onDragOver.apply(r2, arguments);
          }, ["prevent", "stop"])), onDragstart: e2[4] || (e2[4] = Object(c["withModifiers"])(function() {
            return r2.onDragStart && r2.onDragStart.apply(r2, arguments);
          }, ["stop"])), onDragend: e2[5] || (e2[5] = Object(c["withModifiers"])(function() {
            return r2.onDragEnd && r2.onDragEnd.apply(r2, arguments);
          }, ["stop"])), onDragenter: e2[6] || (e2[6] = Object(c["withModifiers"])(function() {
          }, ["prevent"])), ref: "draggableItemEl", class: { isDragging: r2.isDragging } }, [Object(c["renderSlot"])(t3.$slots, "default")], 34);
        });
        n("a9e3"), n("4de4"), n("96cf"), n("d3b7"), n("e6cf");
        function l(t3, e2, n2, r2, o2, i2, c2) {
          try {
            var a2 = t3[i2](c2), u2 = a2.value;
          } catch (f2) {
            return void n2(f2);
          }
          a2.done ? e2(u2) : Promise.resolve(u2).then(r2, o2);
        }
        function p(t3) {
          return function() {
            var e2 = this, n2 = arguments;
            return new Promise(function(r2, o2) {
              var i2 = t3.apply(e2, n2);
              function c2(t4) {
                l(i2, r2, o2, c2, a2, "next", t4);
              }
              function a2(t4) {
                l(i2, r2, o2, c2, a2, "throw", t4);
              }
              c2(void 0);
            });
          };
        }
        n("a434"), n("a4d3"), n("4160"), n("e439"), n("dbb4"), n("b64b"), n("159b");
        function d(t3, e2, n2) {
          return e2 in t3 ? Object.defineProperty(t3, e2, { value: n2, enumerable: true, configurable: true, writable: true }) : t3[e2] = n2, t3;
        }
        function v(t3, e2) {
          var n2 = Object.keys(t3);
          if (Object.getOwnPropertySymbols) {
            var r2 = Object.getOwnPropertySymbols(t3);
            e2 && (r2 = r2.filter(function(e3) {
              return Object.getOwnPropertyDescriptor(t3, e3).enumerable;
            })), n2.push.apply(n2, r2);
          }
          return n2;
        }
        function h(t3) {
          for (var e2 = 1; e2 < arguments.length; e2++) {
            var n2 = null != arguments[e2] ? arguments[e2] : {};
            e2 % 2 ? v(Object(n2), true).forEach(function(e3) {
              d(t3, e3, n2[e3]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(n2)) : v(Object(n2)).forEach(function(e3) {
              Object.defineProperty(t3, e3, Object.getOwnPropertyDescriptor(n2, e3));
            });
          }
          return t3;
        }
        var b = function(t3, e2, n2) {
          var r2 = t3.filter(function(t4) {
            return t4.id !== e2.id;
          });
          return r2.splice(n2, 0, h({}, e2)), r2;
        }, g = function() {
          var t3 = 0;
          return function() {
            return t3++;
          };
        }, y = function(t3, e2) {
          var n2 = false;
          return function() {
            n2 || (t3.apply(void 0, arguments), n2 = true, setTimeout(function() {
              n2 = false;
            }, e2));
          };
        }, m = (n("d81d"), g()), w = function(t3) {
          return t3.map(function(t4) {
            return { id: m(), data: t4 };
          });
        }, O = function(t3) {
          return t3.map(function(t4) {
            return t4.data;
          });
        }, x = Object(c["ref"])(null), j = Object(c["ref"])(null), S = false, E = g(), L = function(t3, e2) {
          var n2 = E(), r2 = Object(c["ref"])(w(t3.value));
          Object(c["watch"])(x, function() {
            x.value || e2.emit("update:modelValue", O(r2.value));
          }), Object(c["watch"])(j, function() {
            j.value !== n2 && (r2.value = r2.value.filter(function(t4) {
              return t4.id !== x.value.id;
            }));
          });
          var o2 = function() {
            !S && x.value && j.value !== n2 && (r2.value.length > 0 || (j.value = n2, r2.value = [x.value]));
          }, i2 = function(t4) {
            var e3 = t4.position;
            !S && x.value && (r2.value = b(r2.value, x.value, e3));
          };
          return { id: n2, items: r2, onDragOver: o2, onItemDragOver: i2 };
        }, T = function(t3, e2, n2, r2) {
          var o2, i2 = Object(c["ref"])(null), a2 = Object(c["ref"])(t3.value.id === (null === (o2 = x.value) || void 0 === o2 ? void 0 : o2.id)), u2 = Object(c["ref"])(null);
          Object(c["onMounted"])(p(regeneratorRuntime.mark(function t4() {
            var e3;
            return regeneratorRuntime.wrap(function(t5) {
              while (1)
                switch (t5.prev = t5.next) {
                  case 0:
                    e3 = i2.value.getBoundingClientRect(), u2.value = e3.top + e3.height / 2;
                  case 2:
                  case "end":
                    return t5.stop();
                }
            }, t4);
          }))), Object(c["onUpdated"])(function() {
            var t4 = i2.value.getBoundingClientRect();
            u2.value = t4.top + t4.height / 2;
          });
          var f2 = function() {
            x.value = t3.value, j.value = n2.value, a2.value = true;
          }, s2 = function() {
            x.value = null;
          }, l2 = y(function(o3) {
            if (t3.value.id !== x.value.id) {
              j.value !== n2.value && (j.value = n2.value);
              var i3 = u2.value - o3.clientY;
              r2.emit("itemDragOver", { position: i3 > 0 ? e2.value : e2.value + 1 });
            }
          }, 50), d2 = function() {
            S = true;
          }, v2 = function() {
            S = false;
          };
          return Object(c["watch"])(x, function() {
            x.value || (a2.value = false);
          }), { draggableItemEl: i2, isDragging: a2, onDragStart: f2, onDragOver: l2, onDragEnd: s2, transitionStart: d2, transitionEnd: v2 };
        }, P = { name: "DraggableItem", props: { item: Object, position: Number, containerId: Number }, setup: function(t3, e2) {
          var n2 = Object(c["toRefs"])(t3), r2 = n2.item, o2 = n2.position, i2 = n2.containerId, a2 = T(r2, o2, i2, e2), u2 = a2.draggableItemEl, f2 = a2.isDragging, s2 = a2.onDragStart, l2 = a2.onDragOver, p2 = a2.onDragEnd, d2 = a2.transitionStart, v2 = a2.transitionEnd;
          return { draggableItemEl: u2, isDragging: f2, onDragStart: s2, onDragOver: l2, onDragEnd: p2, transitionStart: d2, transitionEnd: v2 };
        } };
        n("f2f9");
        P.render = s, P.__scopeId = "data-v-2fc82866";
        var D = P, I = { name: "Draggable", components: { DraggableItem: D }, props: { modelValue: Array, transition: { default: "0", type: String } }, setup: function(t3, e2) {
          var n2 = Object(c["toRefs"])(t3), r2 = n2.modelValue, o2 = L(r2, e2), i2 = o2.id, a2 = o2.items, u2 = o2.onDragOver, f2 = o2.onItemDragOver;
          return { id: i2, items: a2, onDragOver: u2, onItemDragOver: f2 };
        }, computed: { transitionStyle: function() {
          return "transform ".concat(this.transition, "ms");
        } } }, M = function() {
          Object(c["useCssVars"])(function(t3) {
            return { "5aa46db2": t3.transitionStyle };
          });
        }, N = I.setup;
        I.setup = N ? function(t3, e2) {
          return M(), N(t3, e2);
        } : M;
        var _ = I;
        n("6037");
        _.render = u, _.__scopeId = "data-v-2fb1486c";
        var A = _, k = A;
        e["default"] = k;
      }, fc6a: function(t2, e, n) {
        var r = n("44ad"), o = n("1d80");
        t2.exports = function(t3) {
          return r(o(t3));
        };
      }, fdbc: function(t2, e) {
        t2.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };
      }, fdbf: function(t2, e, n) {
        var r = n("4930");
        t2.exports = r && !Symbol.sham && "symbol" == typeof Symbol.iterator;
      }, fea9: function(t2, e, n) {
        var r = n("da84");
        t2.exports = r.Promise;
      } });
    });
  }
});

// dep:vue3-draggable
var vue3_draggable_default = require_vue3_draggable_umd_min();
export {
  vue3_draggable_default as default
};
//# sourceMappingURL=vue3-draggable.js.map
